<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.uveta.io</id>
    <title>Uveta&#39;s blog • Posts by &#34;.net&#34; tag</title>
    <link href="https://www.uveta.io" />
    <updated>2020-09-05T07:32:56.000Z</updated>
    <category term="azure" />
    <category term="certification" />
    <category term="advanced" />
    <category term=".net" />
    <category term="csharp" />
    <category term="containers" />
    <category term="microservices" />
    <category term="dotnet" />
    <entry>
        <id>https://www.uveta.io/categories/blog/ahaaas-august-2020/</id>
        <title>Ahaaas! - August 2020</title>
        <link rel="alternate" href="https://www.uveta.io/categories/blog/ahaaas-august-2020/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/categories/blog/ahaaas-august-2020/cartoon-1294877.png&#34; class=&#34;&#34; title=&#34;Eureka&#34;&gt;

&lt;p&gt;New month, new exciting moments from my life as a developer. I hope you will enjoy reading about these flashes of clarity, that come suddenly after solving unfamiliar problems. Or as I like to call them - Ahaaas!&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h3 id=&#34;NET&#34;&gt;&lt;a href=&#34;#NET&#34; class=&#34;headerlink&#34; title=&#34;.NET&#34;&gt;&lt;/a&gt;.NET&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Instead of using &lt;code&gt;BlockingCollection&lt;/code&gt;, recommended implementation of producer/consumer pattern for .NET Core should utilize &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/an-introduction-to-system-threading-channels/&#34;&gt;Channels&lt;/a&gt;. Besides granting full control of number of consumers, it is completely asynchronous and does not lead to thread blocking.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If writing a custom ASP.NET Core middleware, pay attention how scoped services are injected. As middlewares are registered as singletons, scoped services cannot be injected via constructor &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/write#middleware-dependencies&#34;&gt;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/write#middleware-dependencies&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is no simple way to resolve implementations of &lt;code&gt;IHostedService&lt;/code&gt; or &lt;code&gt;BackgroundService&lt;/code&gt; from DI container. Event though hosted services should not be injected into other services, if you absolutely need to, you can do one of the following (ordered by recommendation, from “yes, please” to “why would you do that”):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do not implement &lt;code&gt;IHostedService&lt;/code&gt; directly, but create a hosted wrapper which injects your service and activates it on start; inject service elsewhere and not the hosted wrapper.&lt;/li&gt;
&lt;li&gt;Register service both as hosted service and a singleton; same instance will be resolved when injecting.&lt;/li&gt;
&lt;li&gt;Inject &lt;code&gt;IEnumerable&amp;lt;IHostedService&amp;gt;&lt;/code&gt; and use LINQ to find instance by concrete type.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the following pattern if you require your event publisher to wait for asynchronous consumers. This can prove useful in case you are testing event driven units and require consumers to complete execution before code following publisher invocation continues. Another example is having application shutdown event, which could wait for consumers before exiting gracefully. Source code was obtained from &lt;a href=&#34;https://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt; but for the life of me I could not find the original question again, hence no direct link :(&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cs hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;event&lt;/span&gt; Func&amp;lt;T, Task&amp;gt; ItemQueued;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;async&lt;/span&gt; Task &lt;span class=&#34;hljs-title&#34;&gt;OnNewItemAsync&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;T item&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (ItemQueued &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;) &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Func&amp;lt;T, Task&amp;gt; handler = ItemQueued;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Delegate[] invocationList = handler.GetInvocationList();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Task[] handlerTasks = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; Task[invocationList.Length];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; invocationList.Length; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      handlerTasks[i] = ((Func&amp;lt;T, Task&amp;gt;)invocationList[i])(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;await&lt;/span&gt; Task.WhenAll(handlerTasks);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When developing server side Blazor application, HTML markup cannot be changed without having to rebuild the whole application. As this is something naturally supported by other SPA frameworks, you can achieve similar behaviour by running application with &lt;em&gt;dotnet watch run&lt;/em&gt;. It will react to any change in source files, re-build and re-run application. It is not a perfect method in any way, but removes the need to manually stop, build and run every time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you use Visual Studio you can have &lt;a href=&#34;https://chrissainty.com/get-some-sass-into-your-blazor-app/&#34;&gt;Sass in Blazor&lt;/a&gt;! It can be achieved by installing an extension and including a specific NuGet package to projects with &lt;em&gt;.scss&lt;/em&gt; files. In VS Code, you can use &lt;a href=&#34;https://github.com/ritwickdey/vscode-live-sass-compiler&#34;&gt;Live Sass Compiler&lt;/a&gt; extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Having trouble finding NuGet package storage and caches on your PC? Just use &lt;em&gt;dotnet nuget locals all –list&lt;/em&gt; to show all relevant paths. Documentation about additional commands for managing NuGet sources can be found &lt;a href=&#34;https://docs.microsoft.com/en-us/nuget/consume-packages/managing-the-global-packages-and-cache-folders&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Selective testing using &lt;em&gt;dotnet test --filter&lt;/em&gt; argument &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=xunit&#34;&gt;https://docs.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=xunit&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Even though health checks were introduced in ASP.NET Core 2.2, there are certain issues with initial implementation. Majority of them, mostly related to &lt;code&gt;IHealthCheckPublisher&lt;/code&gt; host service and options, were fixed in version 3.0. But, if you are still using 2.2, you might want to check &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/health-checks?view=aspnetcore-2.2#health-check-publisher-1&#34;&gt;issue description and workarounds&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Azure&#34;&gt;&lt;a href=&#34;#Azure&#34; class=&#34;headerlink&#34; title=&#34;Azure&#34;&gt;&lt;/a&gt;Azure&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Even if you don’t think you’d need it, I recommend turning on soft delete on all blob storages, for at least a period of 7 days. It is one of few features that can protect you from accidental blob removal, as blob storage is currently not supported by Azure Backup. More details on how to enable this option can be found in &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/storage/blobs/soft-delete-enable&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In order to test timer triggered Azure Functions, Portal can be used to manually invoke them. From the blade of your Function App, go to Functions, select specific function by name, go to Code + Test and click Test\Run button. Function will be immediately invoked and you can even check its log output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you used official template to deploy Elasticsearch cluster to Azure, be sure to replace data disks on each node. They are deployed as standard HDD by default, but I would recommend using standard or, even better, premium SSD. The price difference is negligible, if you are not using very large disks. Obvious benefit is having query response time reduced by approximately 50%. To replace the disk, simply power down node VM, select data disk from Disks blade and switch it to SSD directly from Portal. Repeat for each node in your cluster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When consuming Azure Service Bus queues/subscriptions, make sure MaxAutoRenewDuration is greater than LockDuration. As best practice, you should leave LockDuration to its default value of 1 minute, and set MaxAutoRenewDuration to maximum time it can take your consumer to process 1 message. If you want to learn more on how Service Bus consumers handle message locking, check &lt;a href=&#34;https://stackoverflow.com/a/60381046&#34;&gt;this great answer on Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Containers&#34;&gt;&lt;a href=&#34;#Containers&#34; class=&#34;headerlink&#34; title=&#34;Containers&#34;&gt;&lt;/a&gt;Containers&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Found a great online workshop showcasing Docker and Kubernetes for .NET developers &lt;a href=&#34;https://dak4.net/&#34;&gt;https://dak4.net&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Virtual Kubelet for Azure Container Instances does not support pod liveness, readiness or startup checks &lt;a href=&#34;https://github.com/virtual-kubelet/azure-aci&#34;&gt;https://github.com/virtual-kubelet/azure-aci&lt;/a&gt;. This can seriously limit its usage in production scenarios, as Kubernetes service will not be able to determine pod health. I recommend using ACI kubelet only for bursts of short-running operations. As a bonus piece of information, you can have only 100 ACI instances per subscription, which means virtual kubelet can handle maximum of 100 pods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At the moment it is not possible to turn off performance monitoring for Azure Kubernetes Service. Collection of various logs can be tweaked, but performance telemetry cannot be configured in any way. This can result in not so small charges for data ingested in Log Analytics, especially if running lots of pods, as telemetry is gathered for every single one of them. Only option is to &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-monitor/insights/container-insights-optout&#34;&gt;disable monitoring altogether&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Miscellaneous&#34;&gt;&lt;a href=&#34;#Miscellaneous&#34; class=&#34;headerlink&#34; title=&#34;Miscellaneous&#34;&gt;&lt;/a&gt;Miscellaneous&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ever wished you could develop in emojis? Now you can &lt;a href=&#34;https://www.emojicode.org/&#34;&gt;https://www.emojicode.org/&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Great explanation of Linux filesystem and usage of various directories found in root path &lt;a href=&#34;https://www.howtogeek.com/117435/htg-explains-the-linux-directory-structure-explained/&#34;&gt;https://www.howtogeek.com/117435/htg-explains-the-linux-directory-structure-explained/&lt;/a&gt;. If you ever wondered what are /bin, /etc, /usr directories used for, look no further.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub is launching its own &lt;a href=&#34;https://github.blog/2020-09-01-introducing-github-container-registry/&#34;&gt;Container Registry&lt;/a&gt;! At the moment, they are just missing their own Kubernetes offering to close development and deployment circle.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="azure" />
        <category term="advanced" />
        <category term=".net" />
        <category term="csharp" />
        <category term="containers" />
        <updated>2020-09-05T07:32:56.000Z</updated>
    </entry>
    <entry>
        <id>https://www.uveta.io/categories/blog/ahaaas-july-2020/</id>
        <title>Ahaaas! - July 2020</title>
        <link rel="alternate" href="https://www.uveta.io/categories/blog/ahaaas-july-2020/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/categories/blog/ahaaas-july-2020/bulb.png&#34; class=&#34;&#34; title=&#34;Eureka&#34;&gt;

&lt;p&gt;In fast paced technology world, developers discover new insights practically on a daily level. Surely you have experienced these moments of almost divine wisdom, ending with “Now I know xyz can do that” or “I have to be aware of xyz” or “Eureka!”. I have recorded my moments of clarity, or Ahaaas as I call them, hoping that some of them will prove useful to you, whether you’d be dealing with .NET development, Azure or Docker.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h3 id=&#34;NET&#34;&gt;&lt;a href=&#34;#NET&#34; class=&#34;headerlink&#34; title=&#34;.NET&#34;&gt;&lt;/a&gt;.NET&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Mocking authentication in ASP.NET Core 3.0 integration tests &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/test/integration-tests#mock-authentication&#34;&gt;https://docs.microsoft.com/en-us/aspnet/core/test/integration-tests#mock-authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Even though ASP.NET Core &lt;code&gt;IConfiguration&lt;/code&gt; entry names are case-insensitive, &lt;code&gt;ConfigurationBinder.Bind()&lt;/code&gt; method is not and property name casing does matter. Prefer using &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.optionsconfigurationservicecollectionextensions.configure&#34;&gt;Configure()&lt;/a&gt; options extension method to bind configuration sections to option types.&lt;/li&gt;
&lt;li&gt;Be careful when using array values in &lt;code&gt;IConfiguration&lt;/code&gt; data sources, especially if you consider overriding with environment specific configurations &lt;a href=&#34;https://rimdev.io/avoiding-aspnet-core-configuration-pitfalls-with-array-values/&#34;&gt;https://rimdev.io/avoiding-aspnet-core-configuration-pitfalls-with-array-values/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you cannot rely on your reverse proxy, it is possible to add client and IP rate limiting to ASP.NET Core. Source code and installation instructions are available at &lt;a href=&#34;https://github.com/stefanprodan/AspNetCoreRateLimit&#34;&gt;https://github.com/stefanprodan/AspNetCoreRateLimit&lt;/a&gt;. Remember, however, that Kestrel should not be used as a public facing web server.&lt;/li&gt;
&lt;li&gt;Controller input model validation can be automated using &lt;code&gt;[ApiController]&lt;/code&gt; attribute and annotations from &lt;code&gt;DataAnnotations&lt;/code&gt; namespace &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation&#34;&gt;https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;When using &lt;code&gt;[DataMember]&lt;/code&gt; attribute to annotate serialization model properties, do not forget to add &lt;code&gt;[DataContract]&lt;/code&gt; to  enclosing type as well. Most of traditional JSON serializers, such as Newtonsoft and Jil, honor property attributes, but expect type to be annotated as well. &lt;code&gt;System.Text.Json.JsonSerializer&lt;/code&gt; surprisingly does not utilize attributes from &lt;code&gt;System.Runtime.Serialization&lt;/code&gt; namespace and uses its own &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-how-to#customize-individual-property-names&#34;&gt;annotations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cool portability tool from .NET to .NET core comes from, you wouldn’t believe it, AWS team. More details &lt;a href=&#34;https://aws.amazon.com/blogs/aws/announcing-the-porting-assistant-for-net/&#34;&gt;https://aws.amazon.com/blogs/aws/announcing-the-porting-assistant-for-net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System.Net.Mail.SmtpClient&lt;/code&gt; is obsolete for some time; recommended alternative is &lt;a href=&#34;https://github.com/jstedfast/MailKit&#34;&gt;MailKit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IApplicationLifetime&lt;/code&gt; service is obsolete from .Net Core 3.0. If you utilize generic host, use &lt;code&gt;IHostApplicationLifetime&lt;/code&gt; instead &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.iapplicationlifetime&#34;&gt;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.iapplicationlifetime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Imagine you have a concrete type implementing two different interfaces. Now imagine you register this type for each interface as a singleton in DI container. When resolving each interface, you will end up with a different instances, i.e. .NET core DI container will create two instances instead of sharing single one.&lt;/li&gt;
&lt;li&gt;If you are looking for Blazor components that you can use for commercial projects, Syncfusion offers a handful via their community license &lt;a href=&#34;https://www.syncfusion.com/products/communitylicense&#34;&gt;https://www.syncfusion.com/products/communitylicense&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Azure&#34;&gt;&lt;a href=&#34;#Azure&#34; class=&#34;headerlink&#34; title=&#34;Azure&#34;&gt;&lt;/a&gt;Azure&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;If you use sessions with Azure Service Bus, be sure to assign session identifier to messages before sending them. Service Bus will not complain if session is missing on enqueue, but will make hell for consumers on delivery and practically keep messages in queue and attempt to deliver them, until expired.&lt;/li&gt;
&lt;li&gt;You can use Azure Log Analytics to collect custom virtual machine logs &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-monitor/platform/data-sources-custom-logs&#34;&gt;https://docs.microsoft.com/en-us/azure/azure-monitor/platform/data-sources-custom-logs&lt;/a&gt;. In Portal, open your  Log Analytics workspace and go to Advanced Settings-&amp;gt;Data-&amp;gt;Custom Logs. You can also collect Windows Event and IIS Logs, as well as Linux Syslog, in a similar fashion.&lt;/li&gt;
&lt;li&gt;Data sampling, configured in Application Insight’s Usage and Estimated Costs, has no effect if you are using ASP.NET core applications without modifying telemetry sampling configuration. Ingested data can significantly increase costs, especially if Azure Functions are used, so use Daily Cap setting to get notified if the amount ingested passes the limit.&lt;/li&gt;
&lt;li&gt;Microsoft Q&amp;amp;A is generally available and should help you find any technical information regarding Azure services &lt;a href=&#34;https://docs.microsoft.com/en-us/answers/products/&#34;&gt;https://docs.microsoft.com/en-us/answers/products/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Miscellaneous&#34;&gt;&lt;a href=&#34;#Miscellaneous&#34; class=&#34;headerlink&#34; title=&#34;Miscellaneous&#34;&gt;&lt;/a&gt;Miscellaneous&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Nice overview of most commonly used open source licenses, with usage restrictions &lt;a href=&#34;https://choosealicense.com/&#34;&gt;https://choosealicense.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Steve Dunn used Blazor to recreate original Pacman &lt;a href=&#34;http://pacmanblazor.azurewebsites.net/&#34;&gt;http://pacmanblazor.azurewebsites.net&lt;/a&gt;. With a little bit of JS interop, he was able to demonstrate potential of client-side Blazor running on WebAssembly. Source code can be found on &lt;a href=&#34;https://github.com/SteveDunn/PacManBlazor&#34;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Postman automatically converts POST requests if it receives a 301 redirect status code. In this situation, it drops any request content and issues a GET request to redirecting location without any body data. This can lead to trouble, as user is never notified of such change during request execution. To avoid such issues, better turn off automatic redirects in Postman settings.&lt;/li&gt;
&lt;li&gt;Elasticsearch .NET client version 7.1.0 seems to have issues when running on .NET core 3.0. Updating client to latest version (7.8.0 at the moment of writing) seems to help.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="azure" />
        <category term="advanced" />
        <category term=".net" />
        <category term="csharp" />
        <category term="containers" />
        <updated>2020-07-25T17:12:39.000Z</updated>
    </entry>
</feed>
