<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.uveta.io</id>
    <title>Uveta&#39;s blog • Posts by &#34;advanced&#34; tag</title>
    <link href="https://www.uveta.io" />
    <updated>2021-12-18T14:00:09.000Z</updated>
    <category term="azure" />
    <category term="dotnet" />
    <category term="certification" />
    <category term="advanced" />
    <category term=".net" />
    <category term="csharp" />
    <category term="containers" />
    <category term="microservices" />
    <entry>
        <id>https://www.uveta.io/categories/blog/unclutter-startup-cs/</id>
        <title>Unclutter Startup.cs</title>
        <link rel="alternate" href="https://www.uveta.io/categories/blog/unclutter-startup-cs/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/categories/blog/unclutter-startup-cs/calendar.jpg&#34; class=&#34;&#34; title=&#34;Advent calendar&#34;&gt;

&lt;p&gt;Configuring service container and setting up request pipeline in ASP.NET Core can eat up a lot of lines of code, especially for more complex projects. A well-established way of doing this is using &lt;em&gt;Startup.cs&lt;/em&gt; and its &lt;code&gt;ConfigureServices()&lt;/code&gt; and &lt;code&gt;Configure()&lt;/code&gt; methods. Although complete application setup can be packed into a single type, we must not forget about Single-responsibility principle. I wanted to show you a way to prevent startup from growing uncontrollably, by keeping different concerns separate from each other.&lt;/p&gt;
&lt;p&gt;One disclaimer though. ASP.NET Core 6 has rolled in and removed the need of having &lt;em&gt;Startup.cs&lt;/em&gt; altogether. Despite that fact, I am sure the ideas presented in this post will be relevant, even in the new era.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;&lt;em&gt;This post is part of &lt;a href=&#34;https://www.csadvent.christmas/&#34;&gt;C# Advent Calendar 2021&lt;/a&gt;. Cheers to &lt;a href=&#34;https://twitter.com/mgroves&#34;&gt;Matthew D. Groves&lt;/a&gt; for letting me participate!&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;Basic-principles&#34;&gt;&lt;a href=&#34;#Basic-principles&#34; class=&#34;headerlink&#34; title=&#34;Basic principles&#34;&gt;&lt;/a&gt;Basic principles&lt;/h2&gt;&lt;p&gt;We will apply two .NET features: &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options&#34;&gt;Options pattern&lt;/a&gt; and &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods&#34;&gt;Extension methods&lt;/a&gt;. Similar to how ASP.NET Core uses plugin architecture, we will utilize these features to separate concerns and leave heavy lifting to dependency injection container.&lt;/p&gt;
&lt;p&gt;One design standard, to keep in mind, is that almost all parts of ASP.NET Core are configured via &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.options.ioptions-1&#34;&gt;IOptions&lt;toptions&gt;&lt;/toptions&gt;&lt;/a&gt; pattern. And, since all &lt;code&gt;IOptions&amp;lt;TOptions&amp;gt;&lt;/code&gt; instances are part of service container, we can use &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options#use-di-services-to-configure-options&#34;&gt;IConfigureOptions&lt;toptions&gt;&lt;/toptions&gt;&lt;/a&gt; or &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options#options-post-configuration&#34;&gt;IPostConfigureOptions&lt;toptions&gt;&lt;/toptions&gt;&lt;/a&gt; to override any one of them.&lt;/p&gt;
&lt;h2 id=&#34;MVC&#34;&gt;&lt;a href=&#34;#MVC&#34; class=&#34;headerlink&#34; title=&#34;MVC&#34;&gt;&lt;/a&gt;MVC&lt;/h2&gt;&lt;p&gt;Whether you are using Controllers only, or including Views or Razor Pages, MVC setup is more or less the same. The goal is to call &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.mvcservicecollectionextensions.addcontrollers&#34;&gt;AddControllers()&lt;/a&gt;, &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.mvcservicecollectionextensions.addcontrollerswithviews&#34;&gt;AddControllersWithViews()&lt;/a&gt; or &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.mvcservicecollectionextensions.addrazorpages&#34;&gt;AddRazorPages()&lt;/a&gt;, based on your scenario, and define configuration for &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.mvcoptions&#34;&gt;MvcOptions&lt;/a&gt;, and possibly &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.razorpages.razorpagesoptions&#34;&gt;RazorPagesOptions&lt;/a&gt;. If you are using &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.text.json.jsonserializer&#34;&gt;System.Text.Json&lt;/a&gt; or &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.AspNetCore.Mvc.NewtonsoftJson&#34;&gt;Newtonsoft Json.NET&lt;/a&gt; for model serialization, you could also configure them in a similar manner. Whole setup would look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MvcExtensions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; IServiceCollection &lt;span class=&#34;hljs-title&#34;&gt;ConfigureMvc&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;this&lt;/span&gt; IServiceCollection services&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddControllers().AddNewtonsoftJson();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSingleton&amp;lt;IConfigureOptions&amp;lt;MvcOptions&amp;gt;, ConfigureMvcOptions&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSingleton&amp;lt;IConfigureOptions&amp;lt;MvcNewtonsoftJsonOptions&amp;gt;, ConfigureNewtonsoftOptions&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; services;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ConfigureMvcOptions&lt;/span&gt; : &lt;span class=&#34;hljs-title&#34;&gt;IConfigureOptions&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;MvcOptions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Configure&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;MvcOptions options&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.SuppressAsyncSuffixInActionNames = &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ConfigureNewtonsoftOptions&lt;/span&gt; : &lt;span class=&#34;hljs-title&#34;&gt;IConfigureOptions&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;MvcNewtonsoftJsonOptions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Configure&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;MvcNewtonsoftJsonOptions options&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.SerializerSettings.Converters.Add(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; StringEnumConverter());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Authentication&#34;&gt;&lt;a href=&#34;#Authentication&#34; class=&#34;headerlink&#34; title=&#34;Authentication&#34;&gt;&lt;/a&gt;Authentication&lt;/h2&gt;&lt;p&gt;Completely driving authentication by configuration is difficult. You probably need to know what type of authentication your application uses in advance. Good news is that, once baseline is established, you can use above mentioned technique to configure individual parts. For example, you would use &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authentication.cookies.cookieauthenticationoptions&#34;&gt;CookieAuthenticationOptions&lt;/a&gt; to configure cookies, and &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authentication.jwtbearer.jwtbeareroptions&#34;&gt;JwtBearerOptions&lt;/a&gt; for token based authentication. Extension and individual configuration options, including an example of injecting IConfiguration into one of them, would look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AuthenticationExtensions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; IServiceCollection &lt;span class=&#34;hljs-title&#34;&gt;ConfigureAuthentication&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;this&lt;/span&gt; IServiceCollection services&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddAuthentication().AddCookie().AddJwtBearer();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSingleton&amp;lt;IConfigureOptions&amp;lt;AuthenticationOptions&amp;gt;, ConfigureAuthenticationOptions&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSingleton&amp;lt;IConfigureOptions&amp;lt;CookieAuthenticationOptions&amp;gt;, ConfigureCookieAuthenticationOptions&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSingleton&amp;lt;IConfigureOptions&amp;lt;JwtBearerOptions&amp;gt;, ConfigureJwtBearerOptions&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; services;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ConfigureAuthenticationOptions&lt;/span&gt; : &lt;span class=&#34;hljs-title&#34;&gt;IConfigureOptions&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;AuthenticationOptions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Configure&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;AuthenticationOptions options&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ConfigureCookieAuthenticationOptions&lt;/span&gt; : &lt;span class=&#34;hljs-title&#34;&gt;IConfigureOptions&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;CookieAuthenticationOptions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Configure&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;CookieAuthenticationOptions options&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.ExpireTimeSpan = TimeSpan.FromHours(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ConfigureJwtBearerOptions&lt;/span&gt; : &lt;span class=&#34;hljs-title&#34;&gt;IConfigureOptions&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;JwtBearerOptions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;readonly&lt;/span&gt; IConfiguration _configuration;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ConfigureJwtBearerOptions&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;IConfiguration configuration&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        _configuration = configuration;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Configure&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;JwtBearerOptions options&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.Authority = _configuration.GetValue&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;jwt:authority&#34;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.RequireHttpsMetadata = &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.IncludeErrorDetails = &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Authorization&#34;&gt;&lt;a href=&#34;#Authorization&#34; class=&#34;headerlink&#34; title=&#34;Authorization&#34;&gt;&lt;/a&gt;Authorization&lt;/h2&gt;&lt;p&gt;Configuring authorization can get quite tedious, if number or complexity of policies increases. Luckily, setup process is pretty straightforward, as the only concern is injecting configuration via &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authorization.authorizationoptions&#34;&gt;AuthorizationOptions&lt;/a&gt; type.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AuthorizationExtensions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; IServiceCollection &lt;span class=&#34;hljs-title&#34;&gt;ConfigureAuthorization&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;this&lt;/span&gt; IServiceCollection services&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddAuthorization();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSingleton&amp;lt;IConfigureOptions&amp;lt;AuthorizationOptions&amp;gt;, ConfigureAuthorizationOptions&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; services;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ConfigureAuthorizationOptions&lt;/span&gt; : &lt;span class=&#34;hljs-title&#34;&gt;IConfigureOptions&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;AuthorizationOptions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Configure&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;AuthorizationOptions options&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.DefaultPolicy = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; AuthorizationPolicyBuilder().RequireAuthenticatedUser().Build();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;OpenAPI&#34;&gt;&lt;a href=&#34;#OpenAPI&#34; class=&#34;headerlink&#34; title=&#34;OpenAPI&#34;&gt;&lt;/a&gt;OpenAPI&lt;/h2&gt;&lt;p&gt;If you care about your REST API consumers, you are publishing service description, using OpenAPI specification. And, since we are talking about ASP.NET Core, you are probably using awesome &lt;a href=&#34;https://www.nuget.org/packages/Swashbuckle.AspNetCore&#34;&gt;Swashbuckle&lt;/a&gt; package. As with previously mentioned framework parts, this extension was designed on same principles, and can be setup in a similar fashion. Whether its generating definition file using &lt;code&gt;SwaggerGenOptions&lt;/code&gt;, or adjusting swagger user interface via &lt;code&gt;SwaggerUIOptions&lt;/code&gt;, everything can be broken down and put into separate types.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;OpenApiExtensions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; IServiceCollection &lt;span class=&#34;hljs-title&#34;&gt;ConfigureOpenApi&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;this&lt;/span&gt; IServiceCollection services&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSwaggerGen();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSwaggerGenNewtonsoftSupport();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSingleton&amp;lt;IConfigureOptions&amp;lt;SwaggerGenOptions&amp;gt;, ConfigureSwaggerGenOptions&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSingleton&amp;lt;IConfigureOptions&amp;lt;SwaggerOptions&amp;gt;, ConfigureSwaggerOptions&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSingleton&amp;lt;IConfigureOptions&amp;lt;SwaggerUIOptions&amp;gt;, ConfigureSwaggerUiOptions&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; services;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ConfigureSwaggerGenOptions&lt;/span&gt; : &lt;span class=&#34;hljs-title&#34;&gt;IConfigureOptions&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;SwaggerGenOptions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Configure&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;SwaggerGenOptions options&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.SwaggerDoc(&lt;span class=&#34;hljs-string&#34;&gt;&#34;v1&#34;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; OpenApiInfo { Title = &lt;span class=&#34;hljs-string&#34;&gt;&#34;Demo&#34;&lt;/span&gt;, Version = &lt;span class=&#34;hljs-string&#34;&gt;&#34;v1&#34;&lt;/span&gt; });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ConfigureSwaggerOptions&lt;/span&gt; : &lt;span class=&#34;hljs-title&#34;&gt;IConfigureOptions&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;SwaggerOptions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Configure&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;SwaggerOptions options&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.RouteTemplate = &lt;span class=&#34;hljs-string&#34;&gt;&#34;swagger/{documentName}/swagger.json&#34;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.PreSerializeFilters.Add((swaggerDoc, httpReq) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            swaggerDoc.Servers = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt;[] {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; OpenApiServer {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    Url = &lt;span class=&#34;hljs-string&#34;&gt;$&#34;&lt;span class=&#34;hljs-subst&#34;&gt;{httpReq.Scheme}&lt;/span&gt;://&lt;span class=&#34;hljs-subst&#34;&gt;{httpReq.Host.Value}&lt;/span&gt;&lt;span class=&#34;hljs-subst&#34;&gt;{httpReq.PathBase}&lt;/span&gt;&#34;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    Description = &lt;span class=&#34;hljs-string&#34;&gt;&#34;Default&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            };&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ConfigureSwaggerUiOptions&lt;/span&gt; : &lt;span class=&#34;hljs-title&#34;&gt;IConfigureOptions&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;SwaggerUIOptions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Configure&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;SwaggerUIOptions options&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.SwaggerEndpoint(&lt;span class=&#34;hljs-string&#34;&gt;&#34;/swagger/v1/swagger.json&#34;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&#34;Demo v1&#34;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Application-Insights&#34;&gt;&lt;a href=&#34;#Application-Insights&#34; class=&#34;headerlink&#34; title=&#34;Application Insights&#34;&gt;&lt;/a&gt;Application Insights&lt;/h2&gt;&lt;p&gt;How about some Azure extensions? Most of the time you will not even need them, as ASP.NET Core seamlessly integrates with most of Azure resources. However, one particular extension I recommend using are &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.ApplicationInsights.AspNetCore&#34;&gt;Application Insights&lt;/a&gt;. You want to have application telemetry under control, and this package allows you to fine tune metrics and data that will be ingested by Azure. From setup point of view, there is nothing surprising:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;TelemetryExtensions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; IServiceCollection &lt;span class=&#34;hljs-title&#34;&gt;ConfigureTelemetry&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;this&lt;/span&gt; IServiceCollection services&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddApplicationInsightsTelemetry();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSingleton&amp;lt;IConfigureOptions&amp;lt;ApplicationInsightsServiceOptions&amp;gt;, ConfigureApplicationInsights&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; services;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ConfigureApplicationInsights&lt;/span&gt; : &lt;span class=&#34;hljs-title&#34;&gt;IConfigureOptions&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;ApplicationInsightsServiceOptions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Configure&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;ApplicationInsightsServiceOptions options&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.EnableHeartbeat = &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.EnableAppServicesHeartbeatTelemetryModule = &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Extras&#34;&gt;&lt;a href=&#34;#Extras&#34; class=&#34;headerlink&#34; title=&#34;Extras&#34;&gt;&lt;/a&gt;Extras&lt;/h2&gt;&lt;p&gt;You’ve probably gotten the gist of it by now; use extension methods to extract service definitions, and options to do actual service configuration. For completeness, let me give you the rest of commonly used ASP.NET Core features, including types used for configuration.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Default files middleware via &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.defaultfilesextensions.usedefaultfiles&#34;&gt;UseDefaultFiles()&lt;/a&gt; - &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.defaultfilesoptions&#34;&gt;DefaultFilesOptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Static files middleware via &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.staticfileextensions.usestaticfiles&#34;&gt;UseStaticFiles()&lt;/a&gt; - &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.staticfileoptions&#34;&gt;StaticFileOptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cross-Origin Resource Sharing via &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.corsservicecollectionextensions.addcors&#34;&gt;AddCors()&lt;/a&gt; - &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.cors.infrastructure.corsoptions?view=aspnetcore-6.0&#34;&gt;CorsOptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;API Versioning services via &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.AspNetCore.Mvc.Versioning&#34;&gt;AddApiVersioning() and AddVersionedApiExplorer()&lt;/a&gt; - &lt;a href=&#34;https://github.com/dotnet/aspnet-api-versioning/blob/master/src/Microsoft.AspNetCore.Mvc.Versioning.ApiExplorer/ApiExplorerOptions.cs&#34;&gt;ApiExplorerOptions&lt;/a&gt; and &lt;a href=&#34;https://github.com/dotnet/aspnet-api-versioning/blob/master/src/Common/Versioning/ApiVersioningOptions.cs&#34;&gt;ApiVersioningOptions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Application-code&#34;&gt;&lt;a href=&#34;#Application-code&#34; class=&#34;headerlink&#34; title=&#34;Application code&#34;&gt;&lt;/a&gt;Application code&lt;/h2&gt;&lt;p&gt;Last but not least, what about your own application code? I highly recommend following the same principles, in order to avoid having application setup in a single place. If you are using clean architecture, and have your code decoupled into layers, initialization could be as simple as:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ApplicationExtensions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; IServiceCollection &lt;span class=&#34;hljs-title&#34;&gt;ConfigureApplication&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;this&lt;/span&gt; IServiceCollection services&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .AddDomain()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .AddApplicationServices()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .AddRepositories()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .AddIntegration();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; services;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;I have shown you one neat little trick that I use all the time, when setting up any kind of application. It is important to remember Single-responsibility principle, even for this type of code. Having &lt;em&gt;Startup.cs&lt;/em&gt; consisting of several hundreds, or even thousands lines, is nothing unheard of. And, sadly, is an obvious code smell.&lt;/p&gt;
&lt;p&gt;All code shown in this post was published to &lt;a href=&#34;https://github.com/uveta/demo-unclutter-startup&#34;&gt;GitHub&lt;/a&gt;, as a single ASP.NET Core 6 project.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="azure" />
        <category term="dotnet" />
        <category term="advanced" />
        <updated>2021-12-18T14:00:09.000Z</updated>
    </entry>
    <entry>
        <id>https://www.uveta.io/categories/blog/asynchronous-job-pattern-the-asp-net-core-mvc-way/</id>
        <title>Asynchronous Job Pattern - The ASP.NET Core MVC Way</title>
        <link rel="alternate" href="https://www.uveta.io/categories/blog/asynchronous-job-pattern-the-asp-net-core-mvc-way/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/categories/blog/asynchronous-job-pattern-the-asp-net-core-mvc-way/calendar.jpg&#34; class=&#34;&#34; title=&#34;Advent calendar&#34;&gt;

&lt;p&gt;Let me present a pattern we used to solve a problem haunting our enterprise application for ages. It was initially designed to handle long running operations, using &lt;a href=&#34;http://restalk-patterns.org/long-running-operation-polling.html&#34;&gt;RESTful approach&lt;/a&gt;, but we soon realized it could be used in many other ways. As it generalizes the system of submitting requests and obtaining responses, it can easily be adapted to different business processes, while keeping unified client interface.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;&lt;em&gt;This post is part of &lt;a href=&#34;https://www.csadvent.christmas/&#34;&gt;C# Advent Calendar 2020&lt;/a&gt;. Cheers to &lt;a href=&#34;https://twitter.com/mgroves&#34;&gt;Matthew D. Groves&lt;/a&gt; for letting me participate!&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;Building-blocks&#34;&gt;&lt;a href=&#34;#Building-blocks&#34; class=&#34;headerlink&#34; title=&#34;Building blocks&#34;&gt;&lt;/a&gt;Building blocks&lt;/h2&gt;&lt;p&gt;From a &lt;em&gt;client&lt;/em&gt; perspective, the pattern usage is pretty simple: it submits a &lt;em&gt;job&lt;/em&gt; for processing to an &lt;em&gt;endpoint&lt;/em&gt;; &lt;em&gt;job&lt;/em&gt; status is polled until processing is finished; if status was successful, client uses &lt;em&gt;endpoint&lt;/em&gt; to obtain output.&lt;/p&gt;
&lt;p&gt;On server side, several components are required to achieve such functionality. Lets take a look at the big picture and define individual pattern pieces.&lt;/p&gt;
&lt;h3 id=&#34;Job&#34;&gt;&lt;a href=&#34;#Job&#34; class=&#34;headerlink&#34; title=&#34;Job&#34;&gt;&lt;/a&gt;Job&lt;/h3&gt;&lt;p&gt;A &lt;em&gt;job&lt;/em&gt; is a principal entity, representing &lt;em&gt;client&lt;/em&gt; intent processed by a designated &lt;em&gt;worker&lt;/em&gt;. It is composed of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Header&lt;/strong&gt;, containing job metadata such as unique identifier, current status, time of creation/start/finish, potential issues as well as estimated time of completion&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Input parameters&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output values&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Worker&#34;&gt;&lt;a href=&#34;#Worker&#34; class=&#34;headerlink&#34; title=&#34;Worker&#34;&gt;&lt;/a&gt;Worker&lt;/h3&gt;&lt;p&gt;Component that does heavy lifting. Main responsibility is actual processing, as each &lt;em&gt;worker&lt;/em&gt; is able to handle specific &lt;em&gt;job&lt;/em&gt; type. In simple terms, we can describe it as a function accepting input parameters and returning either &lt;em&gt;job&lt;/em&gt; output or an error.&lt;/p&gt;
&lt;h3 id=&#34;Endpoint&#34;&gt;&lt;a href=&#34;#Endpoint&#34; class=&#34;headerlink&#34; title=&#34;Endpoint&#34;&gt;&lt;/a&gt;Endpoint&lt;/h3&gt;&lt;p&gt;Serves as an entry-point for &lt;em&gt;clients&lt;/em&gt;. After creating a job, &lt;em&gt;client&lt;/em&gt; should be able to obtain &lt;em&gt;job&lt;/em&gt; status at any point in time, as well as output after processing is finished. &lt;em&gt;Endpoint&lt;/em&gt; should also allow &lt;em&gt;client&lt;/em&gt; to cancel and clean-up a &lt;em&gt;job&lt;/em&gt;. Hence, it needs to provide following services:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create &lt;em&gt;job&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Get &lt;em&gt;job&lt;/em&gt; status&lt;/li&gt;
&lt;li&gt;Get &lt;em&gt;job&lt;/em&gt; output&lt;/li&gt;
&lt;li&gt;Delete &lt;em&gt;job&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Job-Repository-and-Queue&#34;&gt;&lt;a href=&#34;#Job-Repository-and-Queue&#34; class=&#34;headerlink&#34; title=&#34;Job Repository and Queue&#34;&gt;&lt;/a&gt;Job Repository and Queue&lt;/h3&gt;&lt;p&gt;A &lt;em&gt;repository&lt;/em&gt; will be used to store all &lt;em&gt;jobs&lt;/em&gt;, which would allow both &lt;em&gt;endpoint&lt;/em&gt; and &lt;em&gt;worker&lt;/em&gt; to read and update &lt;em&gt;job&lt;/em&gt; state. For now, let’s consider &lt;em&gt;repository&lt;/em&gt; an abstraction, as concrete implementation and storage technology may vary, depending on usage scenario.&lt;/p&gt;
&lt;p&gt;Binding between an &lt;em&gt;endpoint&lt;/em&gt; and a &lt;em&gt;worker&lt;/em&gt; would be achieved using a &lt;em&gt;job queue&lt;/em&gt; concept. It has to provide a &lt;em&gt;producer&lt;/em&gt; and a &lt;em&gt;consumer&lt;/em&gt;, depending on the component using &lt;em&gt;queue&lt;/em&gt; services. Similar to how &lt;em&gt;repository&lt;/em&gt; was defined, implementation may range from memory one to a hyper-scale message broker. &lt;/p&gt;
&lt;p&gt;Final pattern architecture is depicted in the diagram bellow. As all core components are defined, we should move on to implementation using APS.NET Core.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;architecture.png&#34; alt=&#34;Job pattern architecture&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ASP-NET-Core-implementation&#34;&gt;&lt;a href=&#34;#ASP-NET-Core-implementation&#34; class=&#34;headerlink&#34; title=&#34;ASP.NET Core implementation&#34;&gt;&lt;/a&gt;ASP.NET Core implementation&lt;/h2&gt;&lt;h3 id=&#34;Implementation-considerations&#34;&gt;&lt;a href=&#34;#Implementation-considerations&#34; class=&#34;headerlink&#34; title=&#34;Implementation considerations&#34;&gt;&lt;/a&gt;Implementation considerations&lt;/h3&gt;&lt;p&gt;In order to make the implementation as universal as possible, we need to limit &lt;em&gt;job&lt;/em&gt; inputs and outputs to one of each. If multiple values are expected, they could be provided via a custom model. &lt;code&gt;JobExecutionResult&lt;/code&gt; will serve as a wrapper for output value, containing result of &lt;em&gt;worker&lt;/em&gt; execution and any possible issues. If we define them as types &lt;code&gt;TInput&lt;/code&gt; and &lt;code&gt;TOutput&lt;/code&gt;, our &lt;em&gt;worker&lt;/em&gt; and &lt;em&gt;endpoint&lt;/em&gt; could look something like this:&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/uveta/85943b7354871239058c4b45ffca8ee9.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://gist.github.com/uveta/9ebe4d6514c8bf6d22dca908eeeb0c04.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;As &lt;em&gt;endpoint&lt;/em&gt; is user independent concept, it will be up to pattern to provide the implementation. On the other hand, &lt;em&gt;worker&lt;/em&gt; is responsible for executing custom actions, hence it’s implementation has to be provided by the pattern user. This reasoning will come into play during design, as we would like to provide plugin architecture for individual pattern components. This will allow utilizing only building blocks required for given scenario, while the user would provide implementation of required and customizable parts.&lt;/p&gt;
&lt;h3 id=&#34;Plugging-in-worker-implementation&#34;&gt;&lt;a href=&#34;#Plugging-in-worker-implementation&#34; class=&#34;headerlink&#34; title=&#34;Plugging in worker implementation&#34;&gt;&lt;/a&gt;Plugging in worker implementation&lt;/h3&gt;&lt;p&gt;&lt;em&gt;Worker&lt;/em&gt; flow is straightforward: it should use &lt;em&gt;queue consumer&lt;/em&gt; to listen for incoming &lt;em&gt;jobs&lt;/em&gt;; whenever one is received, it should process it and update &lt;em&gt;job&lt;/em&gt; status and output via &lt;em&gt;repository&lt;/em&gt;; then it waits for next one and repeats previous steps. This cycle is supposed to run for the whole application lifetime, as new &lt;em&gt;jobs&lt;/em&gt; can arrive at any time. A natural solution to implement such functionality are &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services&#34;&gt;hosted services&lt;/a&gt;. In our case, we could extract all common code (starting &lt;em&gt;queue consumer&lt;/em&gt;, input/output serialization and &lt;em&gt;job&lt;/em&gt; update) to a &lt;code&gt;WorkerInvoker&amp;lt;TWorker&amp;gt;&lt;/code&gt; hosted service, bound to specific &lt;em&gt;worker&lt;/em&gt; by it generic type &lt;code&gt;TWorker&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Adding &lt;code&gt;TWorker&lt;/code&gt; type to DI container has multiple benefits. On one side, it can be injected into &lt;code&gt;WorkerInvoker&amp;lt;TWorker&amp;gt;&lt;/code&gt;, removing the need to create it manually. On the other hand, it allows developers of &lt;code&gt;TWorker&lt;/code&gt; to freely inject business services into it.&lt;/p&gt;
&lt;h3 id=&#34;Exposing-endpoints&#34;&gt;&lt;a href=&#34;#Exposing-endpoints&#34; class=&#34;headerlink&#34; title=&#34;Exposing endpoints&#34;&gt;&lt;/a&gt;Exposing endpoints&lt;/h3&gt;&lt;p&gt;Since controllers are used as primary entry point into MVC applications, they are an obvious choice for coupling with &lt;em&gt;endpoints&lt;/em&gt;. In this case, &lt;a href=&#34;http://restalk-patterns.org/long-running-operation-polling.html&#34;&gt;initial description&lt;/a&gt; should be followed to the letter, as we are in domain of HTTP REST operations. Hence, controllers should include following routes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;POST &lt;em&gt;/jobs&lt;/em&gt;&lt;/strong&gt;: allows creating new jobs; responds with status &lt;em&gt;202 (Accepted)&lt;/em&gt;, containing &lt;em&gt;job&lt;/em&gt; resource &lt;em&gt;URL&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GET &lt;em&gt;/jobs/{jobId}&lt;/em&gt;&lt;/strong&gt;: resource &lt;em&gt;URL&lt;/em&gt; can be used for polling &lt;em&gt;job&lt;/em&gt; status, while in progress; when processing is finished, use &lt;em&gt;303 (See Other)&lt;/em&gt; redirect to provide client with an output resource &lt;em&gt;URL&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GET &lt;em&gt;/jobs/{jobId}/output&lt;/em&gt;&lt;/strong&gt;: output resource &lt;em&gt;URL&lt;/em&gt;; should return &lt;em&gt;200 (OK)&lt;/em&gt; result containing output value, after &lt;em&gt;job&lt;/em&gt; processing finishes; returns &lt;em&gt;404 (NotFound)&lt;/em&gt; error otherwise&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DELETE &lt;em&gt;/jobs/{jobId}&lt;/em&gt;&lt;/strong&gt;: disposes of any reserved resources; client should call it after polling finishes and output is obtained; if not done by client, server should clean up old &lt;em&gt;jobs&lt;/em&gt; automatically&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The burden of creating a controller should not fall on the user; it is the responsibility of the pattern itself, since each route functionality is known in advance. For this purpose we could implement a generic &lt;code&gt;JobsController&amp;lt;TEndpoint&amp;gt;&lt;/code&gt;, which would be bound to specific &lt;em&gt;endpoint&lt;/em&gt; via its type parameter &lt;code&gt;TEndpoint&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As multiple &lt;em&gt;endpoints&lt;/em&gt; per service have to be supported, MVC requires providing different underlying type for each controller. This is not possible with our idea of using a generic one, as changing generic’s type parameter does not change overall generic type. Instead, we should create individual controller type from base generic dynamically, using a bit of &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.typebuilder&#34;&gt;TypeBuilder&lt;/a&gt; reflection magic. Generated types could then be added to MVC using custom &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.applicationparts.iapplicationparttypeprovider&#34;&gt;IApplicationPartTypeProvider&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;Few-words-on-repository-and-queue&#34;&gt;&lt;a href=&#34;#Few-words-on-repository-and-queue&#34; class=&#34;headerlink&#34; title=&#34;Few words on repository and queue&#34;&gt;&lt;/a&gt;Few words on repository and queue&lt;/h3&gt;&lt;p&gt;Following how we defined &lt;em&gt;job repository&lt;/em&gt; and &lt;em&gt;queue&lt;/em&gt;, respecting interfaces would be:&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/uveta/44ca3dfbba05536e5091fbc353b611ec.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://gist.github.com/uveta/585866e8ae67e75d7c65eac9cccb6d0b.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The pattern has to supply default memory implementation for both of them. Although this should suffice for test and single-service usage, it completely falls flat in any advanced scenarios. Hence, replacing default implementations must be allowed via extensions.&lt;/p&gt;
&lt;h3 id=&#34;Configuring-job-services&#34;&gt;&lt;a href=&#34;#Configuring-job-services&#34; class=&#34;headerlink&#34; title=&#34;Configuring job services&#34;&gt;&lt;/a&gt;Configuring job services&lt;/h3&gt;&lt;p&gt;We should follow principals ASP.NET Core was build upon and adopt a plugin architecture in order to configure our pattern services. I used &lt;a href=&#34;https://github.com/uveta/extensions-jobs/tree/main/samples/MvcDemo&#34;&gt;a sample project&lt;/a&gt; to demonstrate how such behavior could be achieved. The following example includes definition of one &lt;em&gt;endpoint&lt;/em&gt; and its bound &lt;em&gt;worker&lt;/em&gt;.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/uveta/777c12716df3015ebc67a651916bea23.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;In this case, &lt;code&gt;PingRequest&lt;/code&gt; and &lt;code&gt;PingResponse&lt;/code&gt; correspond to input and output types. &lt;code&gt;PingWorker&lt;/code&gt; represents a custom implementation of &lt;code&gt;IWorker&lt;/code&gt;, supplied by user. Other components (&lt;em&gt;endpoint&lt;/em&gt;, &lt;em&gt;repository&lt;/em&gt; and &lt;em&gt;queue&lt;/em&gt;) are provided by pattern and only configured here.&lt;/p&gt;
&lt;h2 id=&#34;Usage-alternatives&#34;&gt;&lt;a href=&#34;#Usage-alternatives&#34; class=&#34;headerlink&#34; title=&#34;Usage alternatives&#34;&gt;&lt;/a&gt;Usage alternatives&lt;/h2&gt;&lt;p&gt;Proposed implementation is just one of many possible, as well as its usage. All building blocks are introduced as abstract concepts, which can be adapted for different scenarios than initially intended. For example, an &lt;em&gt;endpoint&lt;/em&gt; could be utilized to issue an RPC call without knowing the address of remote service; client would use &lt;em&gt;endpoint&lt;/em&gt; to create a new job, which would reach designated &lt;em&gt;worker&lt;/em&gt; via queue, effectively removing the need of individual services knowing other ones even exist. Only constraint is imposed by specific business feature, having strictly defined input and output.&lt;/p&gt;
&lt;p&gt;Further improvements can be introduced on &lt;em&gt;workers&lt;/em&gt; as well. In order to use them in a real-world scenarios, there has to be a possibility of configuring their maximum scaling and execution period limits. This feature will have to be supported by &lt;em&gt;queue&lt;/em&gt; implementation, as &lt;em&gt;worker&lt;/em&gt; is invoked based on actions triggered by &lt;em&gt;queue consumer&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Finally, default memory implementations of &lt;em&gt;queue&lt;/em&gt; and &lt;em&gt;repository&lt;/em&gt; are only good for &lt;a href=&#34;https://github.com/uveta/extensions-jobs/tree/main/samples/MvcDemo&#34;&gt;demonstration purposes&lt;/a&gt;. &lt;em&gt;Repository&lt;/em&gt; should offer some form of permanent external storage, especially if usage in multi-service applications is considered. Same goes for &lt;em&gt;queue&lt;/em&gt;, as the need for underlying message broker is evident in even simple production scenarios.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In this article I explained which set of problems did we solve using long running job pattern. We also saw one of the ways to implement it, using ASP.NET Core MVC. As a final observation, I described how inner pattern components can be used outside of MVC, in any system that wants to generalize request/response flow and reduce service coupling.&lt;/p&gt;
&lt;p&gt;Source code and samples can be found on &lt;a href=&#34;https://github.com/uveta/extensions-jobs&#34;&gt;Github&lt;/a&gt;. Individual packages have also been published to &lt;a href=&#34;https://www.nuget.org/packages/Uveta.Extensions.Jobs/&#34;&gt;nuget.org&lt;/a&gt;, in case you would like to try them in your own application.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="dotnet" />
        <category term="advanced" />
        <category term="microservices" />
        <updated>2020-12-21T20:33:44.000Z</updated>
    </entry>
    <entry>
        <id>https://www.uveta.io/categories/blog/windows-vs-linux-appservice-whats-the-difference/</id>
        <title>Windows vs Linux App Service - What is the Difference?</title>
        <link rel="alternate" href="https://www.uveta.io/categories/blog/windows-vs-linux-appservice-whats-the-difference/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/categories/blog/windows-vs-linux-appservice-whats-the-difference/windows_linux.png&#34; class=&#34;&#34; title=&#34;Windows and Linux logo&#34;&gt;

&lt;p&gt;I always wanted to devote an article to Azure App Service, as it is my personal weapon of choice for hosting Web Apps. And what better topic to choose, than the one I always found official documentation severely lacking: describing feature difference between Windows and Linux platforms.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Why-App-Service&#34;&gt;&lt;a href=&#34;#Why-App-Service&#34; class=&#34;headerlink&#34; title=&#34;Why App Service?&#34;&gt;&lt;/a&gt;Why App Service?&lt;/h2&gt;&lt;p&gt;To me, App Service offers perfect balance between ease of deployment and features supported. Adding to its maturity is a rich set of tools and plugins, promoting work in almost any environment.&lt;/p&gt;
&lt;p&gt;A major decision, before even getting to deployment, is the choice of Windows or Linux platform. Without going deep into architectural details, I will try to explain main differences which should interest you as a consumer.&lt;/p&gt;
&lt;h2 id=&#34;Which-App-Service-Plan-to-choose&#34;&gt;&lt;a href=&#34;#Which-App-Service-Plan-to-choose&#34; class=&#34;headerlink&#34; title=&#34;Which App Service Plan to choose?&#34;&gt;&lt;/a&gt;Which App Service Plan to choose?&lt;/h2&gt;&lt;p&gt;Platform on which App Service would be running is dictated by its App Service Plan. If underlying plan is running Windows, service will have to as well. Same goes for Linux. Hence, you cannot mix different platform services on a single plan.&lt;/p&gt;
&lt;p&gt;Furthermore, due to the limitations of underlying networking implementation, plans with different platforms cannot even be a part of the same resource group. You will need at least 2 resource groups if you want to support both Windows and Linux deployments.&lt;/p&gt;
&lt;h2 id=&#34;Is-my-application-stack-supported&#34;&gt;&lt;a href=&#34;#Is-my-application-stack-supported&#34; class=&#34;headerlink&#34; title=&#34;Is my application stack supported?&#34;&gt;&lt;/a&gt;Is my application stack supported?&lt;/h2&gt;&lt;p&gt;App Service documentation states it can run applications written in following languages: .NET, .NET Core, Java, Node.js, Ruby, PHP and Python. However, depending on the platform, certain limitations are in place. Linux service is obviously unable to run older .NET applications, but only .NET Core, so Windows is the only alternative if using ASP.NET. On the other hand, Ruby is supported only on Linux service.&lt;/p&gt;
&lt;p&gt;Good news is that both platforms support running containers, allowing further customization of execution environment. If runtime is not among supported languages, it will have to be included in the deployment image.&lt;/p&gt;
&lt;h2 id=&#34;Who-handles-incoming-web-requests&#34;&gt;&lt;a href=&#34;#Who-handles-incoming-web-requests&#34; class=&#34;headerlink&#34; title=&#34;Who handles incoming web requests?&#34;&gt;&lt;/a&gt;Who handles incoming web requests?&lt;/h2&gt;&lt;p&gt;Choice of platform also determines primary entry-point to the application. In case of Windows, Internet Information Services (IIS) is used, while Apache HTTP Server would be used on Linux. Since integration of IIS and App Service is far more mature, running under Linux imposes few limitations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Application will always run out of process, as opposed to in-process hosting. Even if using supported stack, i.e. .NET Core, it will still default to out of process hosting, under these circumstances. This can result in reduced throughput, especially if application is serving ample amounts of incoming requests.&lt;/li&gt;
&lt;li&gt;Custom path mappings are not available, forcing application hosting on root path only. There is, however, a possibility to provide up to 5 path mappings to external storage accounts, e.g. to serve static resources.&lt;/li&gt;
&lt;li&gt;Custom IIS features are clearly not supported. If IIS configuration file (web.config) is present, it will simply be ignored. This limits usage of IIS modules, such as application initialization.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;What-do-I-do-when-things-go-wrong&#34;&gt;&lt;a href=&#34;#What-do-I-do-when-things-go-wrong&#34; class=&#34;headerlink&#34; title=&#34;What do I do when things go wrong?&#34;&gt;&lt;/a&gt;What do I do when things go wrong?&lt;/h2&gt;&lt;p&gt;Linux users will also have hard time diagnosing running applications. For example, when running a Windows service, setting up remote debugging via Visual Studio (Code) is trivial, as it can be enabled by simply flipping a switch in App Service settings. Although it is possible to use remote debugging on Linux, via SSH tunnel, the setup is not straightforward and not available off the shelf, as it is the case with Windows.&lt;/p&gt;
&lt;p&gt;Luckily, Linux App Service permits incoming SSH connection, which can be initiated from Azure Portal, as well as remotely, using preferred client. This opens a world of possibilities when trying to determine why running applications are not behaving optimally.&lt;/p&gt;
&lt;h2 id=&#34;Which-App-Service-extensions-can-I-use&#34;&gt;&lt;a href=&#34;#Which-App-Service-extensions-can-I-use&#34; class=&#34;headerlink&#34; title=&#34;Which App Service extensions can I use?&#34;&gt;&lt;/a&gt;Which App Service extensions can I use?&lt;/h2&gt;&lt;p&gt;When talking about App Service extensions the situation is pretty clear: they are fully supported on Windows, and not supported at all on Linux. This can have implications if hosted application depends on any of them. For example, Azure Application Insights cannot be enabled from App Service, but application itself has to include Insights SDK. Instrumentation key can still be passed via App Service settings.&lt;/p&gt;
&lt;p&gt;WebJobs are another victim in this case. They cannot be operated independently of the application, at least not in the way they are created and ran on Windows service. Although Linux offers some alternatives, such as cron jobs, they have to be setup and monitored manually via SSH.&lt;/p&gt;
&lt;h2 id=&#34;Any-final-words&#34;&gt;&lt;a href=&#34;#Any-final-words&#34; class=&#34;headerlink&#34; title=&#34;Any final words?&#34;&gt;&lt;/a&gt;Any final words?&lt;/h2&gt;&lt;p&gt;This article could have easily be named &lt;em&gt;“10 and more advantages of Windows over Linux App Service”&lt;/em&gt;, but I decided to stick with my initial idea. It is obvious that Windows version is much more mature, offering a rich collection of additional features, while Linux is slowly catching up.&lt;/p&gt;
&lt;p&gt;There are however some situations where you should choose the less mature option. Linux is currently your only choice if you want to run Ruby applications out-of-the-box, not including custom container option. In case cost optimization is important, Linux is generally a better choice, as it does not come with any operating system license charges.&lt;/p&gt;
&lt;p&gt;I hope information in this article will make choosing your future App Service platform a bit more straightforward.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="azure" />
        <category term="advanced" />
        <updated>2020-11-29T19:00:10.000Z</updated>
    </entry>
    <entry>
        <id>https://www.uveta.io/categories/blog/azure-functions-deep-dive/</id>
        <title>Azure Functions Deep Dive</title>
        <link rel="alternate" href="https://www.uveta.io/categories/blog/azure-functions-deep-dive/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/categories/blog/azure-functions-deep-dive/banner.jpg&#34; class=&#34;&#34; title=&#34;Function in action&#34;&gt;

&lt;p&gt;Ever wondered what happens under the hood of Azure Functions? How can your server code magically run without a server? How does it know when to scale and how much? How to adjust your application to run optimally as a function? I’ve got you covered.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;How-did-it-all-start&#34;&gt;&lt;a href=&#34;#How-did-it-all-start&#34; class=&#34;headerlink&#34; title=&#34;How did it all start&#34;&gt;&lt;/a&gt;How did it all start&lt;/h2&gt;&lt;p&gt;In 2014 (ancient history!) Microsoft introduced WebJobs. As a part of their Azure Web Sites PAAS offering (later re-branded as Azure Web Apps), it allowed uses to run arbitrary application in Azure, be it a Windows executable, Powershell, bash script, or code written in .NET, Java, PHP, Python or JavaScript. Not only that, but it had built-in input and output bindings for various Azure resources, such as blob storage, queue or Service Bus. From the get-go, you could trigger your WebJob from all of these resources, and write to them, without having to handle communication yourself. Later extensions allowed jobs to be triggered by CRON timers and HTTP requests. Sounds familiar? This is how Azure WebJobs SDK came to be, which later served as a base platform for Azure Functions.&lt;/p&gt;
&lt;p&gt;Although they are still available as part of Web Apps (check &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/app-service/webjobs-create&#34;&gt;Web Jobs&lt;/a&gt; blade on your App Service) and have their fair share of usage, Web Jobs have mostly been replaced with higher order resources, such as Function or Logic Apps.&lt;/p&gt;
&lt;h2 id=&#34;Components&#34;&gt;&lt;a href=&#34;#Components&#34; class=&#34;headerlink&#34; title=&#34;Components&#34;&gt;&lt;/a&gt;Components&lt;/h2&gt;&lt;p&gt;As we established in the previous section, Azure WebJobs SDK is an essential piece of Function Apps. It is responsible for running custom application and provides bindings to external resources. Another part is, for completeness’ sake, the custom application itself, serving whatever purpose user sees fit. But we mustn’t forget about another, equally important component. The glue that ties it all together, the &lt;a href=&#34;https://github.com/Azure/azure-functions-host&#34;&gt;Azure Functions Host&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;Functions-Host&#34;&gt;&lt;a href=&#34;#Functions-Host&#34; class=&#34;headerlink&#34; title=&#34;Functions Host&#34;&gt;&lt;/a&gt;Functions Host&lt;/h3&gt;&lt;p&gt;Functions Host is, in its core, a lightweight ASP.NET Core application running on top of Azure WebJobs SDK. It serves as a connector between custom application (executed by a trigger), all &lt;em&gt;function.json&lt;/em&gt; files (containing individual functions metadata) and single &lt;em&gt;host.json&lt;/em&gt; file (host configuration including logging, specific trigger options and various extension settings, common for all functions that are part of a single Function App).&lt;/p&gt;
&lt;p&gt;Custom application itself is discovered and managed by Functions Host, and executed via WebJobs SDK. Scaling, however, lies outside of responsibilities of Host instances. It is managed by an independent component - Scale Controller.&lt;/p&gt;
&lt;h3 id=&#34;Scale-Controller&#34;&gt;&lt;a href=&#34;#Scale-Controller&#34; class=&#34;headerlink&#34; title=&#34;Scale Controller&#34;&gt;&lt;/a&gt;Scale Controller&lt;/h3&gt;&lt;p&gt;Just as Functions Host is responsible for handling and running individual functions, Scale Controller also plays a managerial role, but for Host instances themselves. It is in charge of creating and destroying individual Hosts, depending on the current workload. Scaling decisions are made based on metrics gathered from resources used as input triggers. Scale Controller is responsible for consuming these metrics and adjusting number of active Host instances.&lt;/p&gt;
&lt;p&gt;As an example, let us have a function triggering of an Azure Service Bus. Scale Controller would have to monitor current number of active messages, as well as maximum message throughput obtained from configuration. In case active message count starts rapidly rising, it will spin up new instances to handle increased load. As number of messages decreases, so will inactive instances be destroyed by Scale Controller.&lt;/p&gt;
&lt;h2 id=&#34;Deployment-and-Hosting&#34;&gt;&lt;a href=&#34;#Deployment-and-Hosting&#34; class=&#34;headerlink&#34; title=&#34;Deployment and Hosting&#34;&gt;&lt;/a&gt;Deployment and Hosting&lt;/h2&gt;&lt;p&gt;I have already mentioned that Function Apps support plethora of programming languages and scripts, e.g .NET, Java, JavaScript, Powershell and Bash, and the list goes on. Even containers are supported, as custom Docker images can be hosted in Function Apps as well.&lt;/p&gt;
&lt;p&gt;On the other hand, multiple hosting plan scenarios are possible: Consumption, running functions only when required; Dedicated, using deployed App Service Plans to run functions alongside existing App Services; and finally Premium, using dedicated elastic App Service Plans to offer unparalleled performance, response time and scaling capabilities. Each of them has its strengths and weaknesses, and I encourage you to go through official documentation before considering function usage.&lt;/p&gt;
&lt;p&gt;Overabundance of supported application and hosting models sadly has its negative sides - not all combinations are supported and not all of them operate effectively together. When other factors are taken into account, such as in-process and out-of process hosting, supported runtimes and operating systems, as well as minimum performance requirements, available options can seriously get limited. I would recommend reading comparison of &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-functions/functions-scale&#34;&gt;Azure Functions hosting plans&lt;/a&gt; before getting seriously involved. The article also contains well-organized support tables for each of hosting options.&lt;/p&gt;
&lt;h2 id=&#34;Tips-and-trick&#34;&gt;&lt;a href=&#34;#Tips-and-trick&#34; class=&#34;headerlink&#34; title=&#34;Tips and trick&#34;&gt;&lt;/a&gt;Tips and trick&lt;/h2&gt;&lt;p&gt;I could have named this section ‘Azure Functions Best Practices’, but Microsoft already &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-functions/functions-best-practices&#34;&gt;beat me to it!&lt;/a&gt; Instead of repeating the same conventions you’ve heard over and over again, I wanted to focus on something different. Specifically, on certain points that I became aware through my experience working with functions. Information following will help you better understand what and what functions can’t be used for, how to use them in a more efficient way and what to do if it all goes haywire.&lt;/p&gt;
&lt;h3 id=&#34;Logging&#34;&gt;&lt;a href=&#34;#Logging&#34; class=&#34;headerlink&#34; title=&#34;Logging&#34;&gt;&lt;/a&gt;Logging&lt;/h3&gt;&lt;p&gt;Unless you added your own custom logging infrastructure, there is a good chance that all telemetry, requests and traces are consumed by Application Insights associated with your Function App. I will not go into detail on how to query this data, but will leave you with a &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-functions/configure-monitoring&#34;&gt;handy explanation&lt;/a&gt; on how it is organized and how to locate individual function components logs.&lt;/p&gt;
&lt;p&gt;Default logging configuration is pretty great, and you would not need to modify it 99.99% of the time. But there is still that 00.01% that will eventually come up, be it during development or trying to solve an issue in production. As all .NET Core applications, functions use structured logging as well, which can be adjusted either by modifying &lt;em&gt;host.json&lt;/em&gt; configuration directly, or via &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-functions/functions-host-json#override-hostjson-values&#34;&gt;application settings&lt;/a&gt;. The most interesting categories that support modifying logging levels are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Function - includes execution start/stop time, dependencies tracking, thrown exceptions, as well as any logs from custom application, in case the code is consuming provided ILogger instance&lt;/li&gt;
&lt;li&gt;Host - contains function invocation count, success rate and duration telemetries; invocation success and failures are also logged&lt;/li&gt;
&lt;li&gt;Microsoft - in case custom application was written in .NET, handles logs coming from .NET components used, e.g. HttpClient, Hosting etc.&lt;/li&gt;
&lt;li&gt;Worker - if running non .NET application, its’ console output would be written using this category&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Reading the list, you must have thought: “Cool, so I can monitor individual function components. But wait a minute… Where is the Scale Controller?!”. No worries, Microsoft is on the case. Gathering logs from &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-functions/functions-monitoring?tabs=cmd#scale-controller-logs&#34;&gt;Scale Controller&lt;/a&gt; is available, but still as a preview feature. For now, it can be configured exclusively using application settings.&lt;/p&gt;
&lt;h3 id=&#34;Function-sandbox&#34;&gt;&lt;a href=&#34;#Function-sandbox&#34; class=&#34;headerlink&#34; title=&#34;Function sandbox&#34;&gt;&lt;/a&gt;Function sandbox&lt;/h3&gt;&lt;p&gt;It goes without saying, but don’t expect your functions to be running on bare metal. Whats more, they are not even hosted on dedicated Virtual Machine. Instead, Function Apps are constrained to what is called an &lt;a href=&#34;https://github.com/projectkudu/kudu/wiki/Azure-Web-App-sandbox&#34;&gt;Azure Web App sandbox&lt;/a&gt;, which, by the way, is the same environment running App Services. The sandbox imposes many limitations, but most important ones, from the point of view of Function App developer, are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no access to Windows shared components - meaning no writing to registry, no service management using SCM and no access to processes outside of sandbox. One more important feature missing is usage of GDI32 graphics subsystem, which is still, sadly, used by most PDF generator tools.&lt;/li&gt;
&lt;li&gt;no disk access - generally, you are not able to read/write to disk even if the target path exists. There are however two exceptions: you can either use storage shared by all sandboxes (/home) or local sandbox storage (/local). Note, however, that local storage is deleted when host instance is terminated.&lt;/li&gt;
&lt;li&gt;limited network features - custom application is allowed to listen on any incoming port, but that port will only be available within the sandbox and not to external clients. It cannot use localhost or 127.0.0.1 address to open connection to ports it did not open itself. On the other side, some of the outgoing ports are restricted, namely 137, 138, 139 and 445.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Function-performance-counter-limits&#34;&gt;&lt;a href=&#34;#Function-performance-counter-limits&#34; class=&#34;headerlink&#34; title=&#34;Function performance counter limits&#34;&gt;&lt;/a&gt;Function performance counter limits&lt;/h3&gt;&lt;p&gt;These limitations are essentially imposed by the Web App sandbox environment as well. Unlike the ones listed in the previous chapter, these ones can be circumvented if your application is properly adapted to run in Function App. Please note that they apply only when hosting on Consumption Plan; if you are hosting using Dedicated or Premium Plans, limitations will depend on VM size used. All the limitations are tracked by &lt;a href=&#34;https://github.com/Azure/azure-functions-host/wiki/Host-Health-Monitor&#34;&gt;Host Health Monitor&lt;/a&gt;, which will start issuing warnings once function approaches or breaks any of the limits. Keep an eye out on Application Insights, where all function failures are logged.&lt;/p&gt;
&lt;h4 id=&#34;Number-of-active-600-and-total-1200-connections&#34;&gt;&lt;a href=&#34;#Number-of-active-600-and-total-1200-connections&#34; class=&#34;headerlink&#34; title=&#34;Number of active (600) and total (1200) connections&#34;&gt;&lt;/a&gt;Number of active (600) and total (1200) connections&lt;/h4&gt;&lt;p&gt;If you are developing a function requiring a lot of external resources, you can easily find yourself exhausting all available active connections. As each function can be ran multiple times (e.g. when it is triggered by a queue), as part of the same sandbox, the limit of 600 connections applies to all the instances combined.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Best trick to avoid breaking the limit is having a single HttpClient instance and reusing it. It is thread safe and will spare you the need to constantly create and dispose of HttpClients, which is a bad practice overall. &lt;/li&gt;
&lt;li&gt;If multiple functions can reuse same external data, consider caching it in shared storage. &lt;/li&gt;
&lt;li&gt;Try to do as little work in a function as possible, as long running functions tend to exhaust connection limit more often.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Number-of-threads-512&#34;&gt;&lt;a href=&#34;#Number-of-threads-512&#34; class=&#34;headerlink&#34; title=&#34;Number of threads (512)&#34;&gt;&lt;/a&gt;Number of threads (512)&lt;/h4&gt;&lt;p&gt;If you are using System.Threading types to start threads manually, consider switching to Tasks, as they are able to utilize thread pool more efficiently. As a general advice, do not try to run many things in parallel, so avoid Threads, TPL and similar multithreaded libraries. It is better to have multiple smaller functions, than trying to handle everything in a single one.&lt;/p&gt;
&lt;h4 id=&#34;Number-of-child-processes-32&#34;&gt;&lt;a href=&#34;#Number-of-child-processes-32&#34; class=&#34;headerlink&#34; title=&#34;Number of child processes (32)&#34;&gt;&lt;/a&gt;Number of child processes (32)&lt;/h4&gt;&lt;p&gt;Consider this limitation if your function has to spawn other processes. Too many child processes can also lead to increased memory usage, which directly affects billed costs of your Function App. In case Consumption Plan is not used, excessive process spawning can lead to underlying VM memory exhaustion.&lt;/p&gt;
&lt;h3 id=&#34;Override-host-configuration-in-code&#34;&gt;&lt;a href=&#34;#Override-host-configuration-in-code&#34; class=&#34;headerlink&#34; title=&#34;Override host configuration in code&#34;&gt;&lt;/a&gt;Override host configuration in code&lt;/h3&gt;&lt;p&gt;If you notice parts of custom &lt;em&gt;host.json&lt;/em&gt; configuration are ignored by FunctionApp, using default values instead, you might be running into the same issue I stumbled upon couple of times. Yet there is a way to ensure overriding host configuration, if you are running in-process application. &lt;a href=&#34;https://github.com/Azure/azure-functions-servicebus-extension/issues/81#issuecomment-621431750]&#34;&gt;The solution&lt;/a&gt; requires injecting dependencies using &lt;em&gt;FunctionStartup&lt;/em&gt;, and is especially useful for changing extensions configuration.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Deep dive into Azure Functions originally started as another &lt;a href=&#34;/categories/blog/ahaaas-august-2020/&#34;&gt;Ahaaas article&lt;/a&gt;. As I have noticed there are more than five different points concerning functions, I decided to dig a bit deeper and bring you this text.&lt;/p&gt;
&lt;p&gt;In this article, I brought up ancient Azure history, in order to explain how Azure Functions came to be. Furthermore, I dissected most important function components and went through deploying and hosting options. Finally, I have included some of my personal experiences working with Azure Functions.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="azure" />
        <category term="advanced" />
        <updated>2020-10-24T15:16:59.000Z</updated>
    </entry>
    <entry>
        <id>https://www.uveta.io/categories/blog/ahaaas-august-2020/</id>
        <title>Ahaaas! - August 2020</title>
        <link rel="alternate" href="https://www.uveta.io/categories/blog/ahaaas-august-2020/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/categories/blog/ahaaas-august-2020/cartoon-1294877.png&#34; class=&#34;&#34; title=&#34;Eureka&#34;&gt;

&lt;p&gt;New month, new exciting moments from my life as a developer. I hope you will enjoy reading about these flashes of clarity, that come suddenly after solving unfamiliar problems. Or as I like to call them - Ahaaas!&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h3 id=&#34;NET&#34;&gt;&lt;a href=&#34;#NET&#34; class=&#34;headerlink&#34; title=&#34;.NET&#34;&gt;&lt;/a&gt;.NET&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Instead of using &lt;code&gt;BlockingCollection&lt;/code&gt;, recommended implementation of producer/consumer pattern for .NET Core should utilize &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/an-introduction-to-system-threading-channels/&#34;&gt;Channels&lt;/a&gt;. Besides granting full control of number of consumers, it is completely asynchronous and does not lead to thread blocking.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If writing a custom ASP.NET Core middleware, pay attention how scoped services are injected. As middlewares are registered as singletons, scoped services cannot be injected via constructor &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/write#middleware-dependencies&#34;&gt;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/write#middleware-dependencies&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is no simple way to resolve implementations of &lt;code&gt;IHostedService&lt;/code&gt; or &lt;code&gt;BackgroundService&lt;/code&gt; from DI container. Event though hosted services should not be injected into other services, if you absolutely need to, you can do one of the following (ordered by recommendation, from “yes, please” to “why would you do that”):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do not implement &lt;code&gt;IHostedService&lt;/code&gt; directly, but create a hosted wrapper which injects your service and activates it on start; inject service elsewhere and not the hosted wrapper.&lt;/li&gt;
&lt;li&gt;Register service both as hosted service and a singleton; same instance will be resolved when injecting.&lt;/li&gt;
&lt;li&gt;Inject &lt;code&gt;IEnumerable&amp;lt;IHostedService&amp;gt;&lt;/code&gt; and use LINQ to find instance by concrete type.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the following pattern if you require your event publisher to wait for asynchronous consumers. This can prove useful in case you are testing event driven units and require consumers to complete execution before code following publisher invocation continues. Another example is having application shutdown event, which could wait for consumers before exiting gracefully. Source code was obtained from &lt;a href=&#34;https://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt; but for the life of me I could not find the original question again, hence no direct link :(&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cs hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;event&lt;/span&gt; Func&amp;lt;T, Task&amp;gt; ItemQueued;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;async&lt;/span&gt; Task &lt;span class=&#34;hljs-title&#34;&gt;OnNewItemAsync&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;T item&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (ItemQueued &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;) &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Func&amp;lt;T, Task&amp;gt; handler = ItemQueued;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Delegate[] invocationList = handler.GetInvocationList();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Task[] handlerTasks = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; Task[invocationList.Length];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; invocationList.Length; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      handlerTasks[i] = ((Func&amp;lt;T, Task&amp;gt;)invocationList[i])(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;await&lt;/span&gt; Task.WhenAll(handlerTasks);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When developing server side Blazor application, HTML markup cannot be changed without having to rebuild the whole application. As this is something naturally supported by other SPA frameworks, you can achieve similar behaviour by running application with &lt;em&gt;dotnet watch run&lt;/em&gt;. It will react to any change in source files, re-build and re-run application. It is not a perfect method in any way, but removes the need to manually stop, build and run every time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you use Visual Studio you can have &lt;a href=&#34;https://chrissainty.com/get-some-sass-into-your-blazor-app/&#34;&gt;Sass in Blazor&lt;/a&gt;! It can be achieved by installing an extension and including a specific NuGet package to projects with &lt;em&gt;.scss&lt;/em&gt; files. In VS Code, you can use &lt;a href=&#34;https://github.com/ritwickdey/vscode-live-sass-compiler&#34;&gt;Live Sass Compiler&lt;/a&gt; extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Having trouble finding NuGet package storage and caches on your PC? Just use &lt;em&gt;dotnet nuget locals all –list&lt;/em&gt; to show all relevant paths. Documentation about additional commands for managing NuGet sources can be found &lt;a href=&#34;https://docs.microsoft.com/en-us/nuget/consume-packages/managing-the-global-packages-and-cache-folders&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Selective testing using &lt;em&gt;dotnet test --filter&lt;/em&gt; argument &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=xunit&#34;&gt;https://docs.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=xunit&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Even though health checks were introduced in ASP.NET Core 2.2, there are certain issues with initial implementation. Majority of them, mostly related to &lt;code&gt;IHealthCheckPublisher&lt;/code&gt; host service and options, were fixed in version 3.0. But, if you are still using 2.2, you might want to check &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/health-checks?view=aspnetcore-2.2#health-check-publisher-1&#34;&gt;issue description and workarounds&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Azure&#34;&gt;&lt;a href=&#34;#Azure&#34; class=&#34;headerlink&#34; title=&#34;Azure&#34;&gt;&lt;/a&gt;Azure&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Even if you don’t think you’d need it, I recommend turning on soft delete on all blob storages, for at least a period of 7 days. It is one of few features that can protect you from accidental blob removal, as blob storage is currently not supported by Azure Backup. More details on how to enable this option can be found in &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/storage/blobs/soft-delete-enable&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In order to test timer triggered Azure Functions, Portal can be used to manually invoke them. From the blade of your Function App, go to Functions, select specific function by name, go to Code + Test and click Test\Run button. Function will be immediately invoked and you can even check its log output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you used official template to deploy Elasticsearch cluster to Azure, be sure to replace data disks on each node. They are deployed as standard HDD by default, but I would recommend using standard or, even better, premium SSD. The price difference is negligible, if you are not using very large disks. Obvious benefit is having query response time reduced by approximately 50%. To replace the disk, simply power down node VM, select data disk from Disks blade and switch it to SSD directly from Portal. Repeat for each node in your cluster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When consuming Azure Service Bus queues/subscriptions, make sure MaxAutoRenewDuration is greater than LockDuration. As best practice, you should leave LockDuration to its default value of 1 minute, and set MaxAutoRenewDuration to maximum time it can take your consumer to process 1 message. If you want to learn more on how Service Bus consumers handle message locking, check &lt;a href=&#34;https://stackoverflow.com/a/60381046&#34;&gt;this great answer on Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Containers&#34;&gt;&lt;a href=&#34;#Containers&#34; class=&#34;headerlink&#34; title=&#34;Containers&#34;&gt;&lt;/a&gt;Containers&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Found a great online workshop showcasing Docker and Kubernetes for .NET developers &lt;a href=&#34;https://dak4.net/&#34;&gt;https://dak4.net&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Virtual Kubelet for Azure Container Instances does not support pod liveness, readiness or startup checks &lt;a href=&#34;https://github.com/virtual-kubelet/azure-aci&#34;&gt;https://github.com/virtual-kubelet/azure-aci&lt;/a&gt;. This can seriously limit its usage in production scenarios, as Kubernetes service will not be able to determine pod health. I recommend using ACI kubelet only for bursts of short-running operations. As a bonus piece of information, you can have only 100 ACI instances per subscription, which means virtual kubelet can handle maximum of 100 pods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At the moment it is not possible to turn off performance monitoring for Azure Kubernetes Service. Collection of various logs can be tweaked, but performance telemetry cannot be configured in any way. This can result in not so small charges for data ingested in Log Analytics, especially if running lots of pods, as telemetry is gathered for every single one of them. Only option is to &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-monitor/insights/container-insights-optout&#34;&gt;disable monitoring altogether&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Miscellaneous&#34;&gt;&lt;a href=&#34;#Miscellaneous&#34; class=&#34;headerlink&#34; title=&#34;Miscellaneous&#34;&gt;&lt;/a&gt;Miscellaneous&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ever wished you could develop in emojis? Now you can &lt;a href=&#34;https://www.emojicode.org/&#34;&gt;https://www.emojicode.org/&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Great explanation of Linux filesystem and usage of various directories found in root path &lt;a href=&#34;https://www.howtogeek.com/117435/htg-explains-the-linux-directory-structure-explained/&#34;&gt;https://www.howtogeek.com/117435/htg-explains-the-linux-directory-structure-explained/&lt;/a&gt;. If you ever wondered what are /bin, /etc, /usr directories used for, look no further.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub is launching its own &lt;a href=&#34;https://github.blog/2020-09-01-introducing-github-container-registry/&#34;&gt;Container Registry&lt;/a&gt;! At the moment, they are just missing their own Kubernetes offering to close development and deployment circle.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="azure" />
        <category term="advanced" />
        <category term=".net" />
        <category term="csharp" />
        <category term="containers" />
        <updated>2020-09-05T07:32:56.000Z</updated>
    </entry>
    <entry>
        <id>https://www.uveta.io/categories/blog/azure-solutions-architect-expert-part-2/</id>
        <title>So you want to be an Azure Solutions Architect Expert - Part 2</title>
        <link rel="alternate" href="https://www.uveta.io/categories/blog/azure-solutions-architect-expert-part-2/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/categories/blog/azure-solutions-architect-expert-part-2/architect-badge.jpg&#34; class=&#34;&#34; title=&#34;Goal!!!&#34;&gt;

&lt;p&gt;Microsoft Azure Architect Design is the second exam required for obtaining Azure Solutions Architect Expert certification. Backed up by deployment and configuration skills, obtained from preparation for Microsoft Azure Architect Technologies exam, we will tackle design of more complex and robust systems in this part.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;This post is part of my Azure Architect certification guide:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/categories/blog/azure-solutions-architect-expert-part-1&#34;&gt;So you want to be an Azure Solutions Architect Expert - Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/categories/blog/azure-solutions-architect-expert-part-2&#34;&gt;So you want to be an Azure Solutions Architect Expert - Part 2&lt;/a&gt; (this post)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Disclaimer: on June 29, AZ-303 and AZ-304 were released, but only as beta for the time being. Exams being replaced, i.e. AZ-300 and AZ-301, will retire on September 30. I will take into account AZ-304 curriculum, and not dwell on AZ-301 topics that are becoming obsolete.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;So-you-want-to-Solution-Architect-AZ-301-Microsoft-Azure-Architect-Design&#34;&gt;&lt;a href=&#34;#So-you-want-to-Solution-Architect-AZ-301-Microsoft-Azure-Architect-Design&#34; class=&#34;headerlink&#34; title=&#34;So you want to Solution Architect (AZ-301: Microsoft Azure Architect Design)&#34;&gt;&lt;/a&gt;So you want to Solution Architect (AZ-301: Microsoft Azure Architect Design)&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;az-301-badge.png&#34; alt=&#34;AZ-301: Microsoft Azure Architect Design&#34;&gt;&lt;/p&gt;
&lt;p&gt;Armed with knowledge of individual Azure services, design exam puts it all together under one roof. As a solution architect it will be your responsibility to create systems fulfilling both functional and non-functional requirements, while taking care not to overstep established restrictions. Desired reliability, availability, scalability and costs heavily influence your architecture and components used, hence a much deeper understanding of Azure services is required.&lt;/p&gt;
&lt;h3 id=&#34;What-type-of-design-questions-await&#34;&gt;&lt;a href=&#34;#What-type-of-design-questions-await&#34; class=&#34;headerlink&#34; title=&#34;What type of design questions await&#34;&gt;&lt;/a&gt;What type of design questions await&lt;/h3&gt;&lt;p&gt;Question formats do not diverge much from the ones mentioned in &lt;a href=&#34;/categories/blog/azure-solutions-architect-expert-part-1/#What-type-of-technology-questions-await&#34;&gt;previous post&lt;/a&gt;. You should however expect many more case-studies, which best suit to illustrate obstacles confronted by a system designer.&lt;/p&gt;
&lt;h3 id=&#34;Where-to-find-study-materials&#34;&gt;&lt;a href=&#34;#Where-to-find-study-materials&#34; class=&#34;headerlink&#34; title=&#34;Where to find study materials&#34;&gt;&lt;/a&gt;Where to find study materials&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;microsoft-docs-architecture.PNG&#34; alt=&#34;Microsoft Azure architecture documentation&#34;&gt;&lt;/p&gt;
&lt;p&gt;The same can be said for study materials. Microsoft documentation and video courses I previously suggested offer more than enough information needed to pass design exam as well. Special significance should be paid to &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/architecture/&#34;&gt;Azure architecture section&lt;/a&gt;, containing reference architectures for different types of deployments. I suggest studying most commonly used ones by analyzing individual components and how they fit together to achieve desired system requirements.&lt;/p&gt;
&lt;h3 id=&#34;Availability&#34;&gt;&lt;a href=&#34;#Availability&#34; class=&#34;headerlink&#34; title=&#34;Availability&#34;&gt;&lt;/a&gt;Availability&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;multi-region-web-app-diagram.png&#34; alt=&#34;App Service in multiple regions&#34;&gt;&lt;/p&gt;
&lt;p&gt;Understanding how Azure datacenters are organized on a global scale is imperative when planning for availability of your deployment. Although Microsoft offers generous SLA for all of its services, outages happen, and careful planning can help you mitigate such interruptions. Most important terms, covered by design exam, include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Datacenter. Basic building block of Azure, consisting of physical devices, storage, power and network connections.&lt;/li&gt;
&lt;li&gt;Availability zone. Collection of one or more datacenters with independent power and network connections. Most Azure resources can be distributed between different availability zones, helping against individual datacenter outages.&lt;/li&gt;
&lt;li&gt;Region. Specific location where Azure resources are deployed, guaranteeing compliance and data residency for specific state or country where datacenters are located. With regard to availability zones, each region contains at least 3 of them.&lt;/li&gt;
&lt;li&gt;Regional pair. Each Azure region is paired with another one, with prescribed minimum distance between them. This ensures resiliency in case of regional outages, due to natural disasters or any similar impediments. Any service update is rolled to one region per pair at a time. Also, in case of global Azure outage, Microsoft will prioritize restoring only one region per pair.&lt;/li&gt;
&lt;li&gt;Geography. Regions belonging to the same country are organized into geographies. Any regional pair is usually a part of the same geography, ensuring compliance and data residency. Exceptions do exists, especially for new geographies where usually only one region is deployed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Besides knowing how outage in any part of Azure infrastructure could affect you, it is vital to understand where each type of resources is deployed. While most of them are being deployed to specific regions, some of them, e.g. Traffic Manager, are non-regional and are deployed globally. Knowing which services allow distribution into availability zones, in order to handle datacenter outages, is also required.&lt;/p&gt;
&lt;h3 id=&#34;Reliability&#34;&gt;&lt;a href=&#34;#Reliability&#34; class=&#34;headerlink&#34; title=&#34;Reliability&#34;&gt;&lt;/a&gt;Reliability&lt;/h3&gt;&lt;p&gt;When designing backup and recovery solution, it is imperative to take into account target Recovery Time Objectives (RTO) and Recovery Point Objectives (RPO). Simply put, they both impose requirements on how your system should behave in case of an outage. While RTO determines maximum period of time an outage is allowed to last, RPO specifies permitted amount of data loss during recovery. For critical system components these values would normally be expressed in seconds, while rarely used or obsolete parts could afford even daily outages. Values imposed by these requirements have great impact not only during recovery design, but also when optimizing costs, which I will cover in the following sections.&lt;/p&gt;
&lt;p&gt;To successfully conquer this part of the exam, deeper understanding of two services is required:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Azure Backup. As the name implies, the service is used for managing backups of other services, be it Azure VM disks, on-premise file systems or SQL servers running on Azure VMs. Although you should be familiar with configuring and deploying it from technologies exam, understanding costs and data retention specifics will be required on design exam.&lt;/li&gt;
&lt;li&gt;Azure Site Recovery. This one is a complex hydra, since it can span multiple Azure regions and even handle on-premise systems connected via VPN. It heavily relies on Backup service and removes the need for manual intervention in case of a failure. I recommend spending some time trying out Site Recovery in Azure Portal, if you have a chance. How to identify failure (both infrastructure and application), how to recover to a secondary deployment (both Azure and on-premise) and how to minimize amount of lost data and downtime (RPO and RTO) are just some of the areas you will need to be proficient in. Luckily, Site Recovery allows manual failovers, allowing you to test and get a good grip on what can happen in case of a system failure.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Scalability&#34;&gt;&lt;a href=&#34;#Scalability&#34; class=&#34;headerlink&#34; title=&#34;Scalability&#34;&gt;&lt;/a&gt;Scalability&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;serverless-web-app.png&#34; alt=&#34;Scalable serverless application&#34;&gt;&lt;/p&gt;
&lt;p&gt;Most compute and database resources, offered by Azure, support scaling out of the box. The trick is knowing which service tier you have to use for specific resource type, as well how to effectively configure scaling to support increase of demand. Whether you are using VM scale sets or App Service, knowing how to configure auto-scaling rules and conditions is a must. Even services such as Function App, which inherently handle scaling, support further adjustments to it. This can be used to control burst of work and better handle costs of potentially unlimited compute resources.&lt;/p&gt;
&lt;p&gt;All previously mentioned areas (availability, reliability and scalability) represent pillars of any highly available and resilient deployment. I would once again emphasize the importance of &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/architecture/&#34;&gt;Azure architecture documentation&lt;/a&gt;, which is an endless pool of reference architectures, allowing building systems fulfilling specific set of requirements.&lt;/p&gt;
&lt;h3 id=&#34;Security&#34;&gt;&lt;a href=&#34;#Security&#34; class=&#34;headerlink&#34; title=&#34;Security&#34;&gt;&lt;/a&gt;Security&lt;/h3&gt;&lt;p&gt;As with any cloud environment, security is involved in almost all of Azure’s components and processes. For the purpose of design exam, I would divide security topics into following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User management, authentication and authorization. Beside knowing how to work with Azure AD and role-based access control (RBAC), which were covered in technologies exam, you will be expected to handle more advanced scenarios and options offered by Azure AD. Configuring single-sign on (SSO), multi-factor authentication (MFA) and dealing with hybrid identity using Azure AD Connect are just some of the examples. As you are expected to handle enterprise level deployments, automating and auditing certain tasks will be a necessity. Hence premium AD options such as Privileged Identity Management (PIM), self-service management, Identity Protection and Just In Time (JIT) VM access should not flow under your radar.&lt;/li&gt;
&lt;li&gt;Application security. Securing our compute resources comes in two flavours: handling service access to other Azure resources and protecting application data. While Managed Identity can handle service authentication, using service principals and RBAC, Azure Key Vault is usually used for storing sensitive application settings and certificates.&lt;/li&gt;
&lt;li&gt;Data protection. As our systems will deal with user data, it is imperative for all of its components to safeguard it. By designing a system that encrypts data at rest, in transit and while in use we can minimize the possibility and impact of data exposure. Knowing how different resources, based on their purpose, handle each part of data flow is a key to conquering these problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Cost-optimization&#34;&gt;&lt;a href=&#34;#Cost-optimization&#34; class=&#34;headerlink&#34; title=&#34;Cost optimization&#34;&gt;&lt;/a&gt;Cost optimization&lt;/h3&gt;&lt;p&gt;First step into providing good cost optimization is knowing when and how are you charged for using Azure resources. Although some costs are fixed, e.g each GB stored, VM reserved, certificate purchased and public IP address assigned, others are charged per usage unit, such as FunctionApp and Container Instances execution time, number of read/write requests to storage accounts and Cosmos DB request units, just to name a few. Different service tiers can also dramatically affect costs of entire deployment, due to extra features offered and more strict SLAs. No one will expect of you to provide exact price of deployment, but knowing how to reduce costs, while still adhering to requirements imposed, will be vital. &lt;/p&gt;
&lt;p&gt;In case of designing for reliability, you will mostly be faced with task of minimizing deployment cost, while maintaining specific RTO and RLO values. Knowing how each storage resource (Cosmos DB, blob and file storage) and recovery service (Site Recovery and Backup) handles these parameters is a skill you will have to master.&lt;/p&gt;
&lt;h3 id=&#34;Governance-and-auditing&#34;&gt;&lt;a href=&#34;#Governance-and-auditing&#34; class=&#34;headerlink&#34; title=&#34;Governance and auditing&#34;&gt;&lt;/a&gt;Governance and auditing&lt;/h3&gt;&lt;p&gt;All parts of an enterprise must be compliant with pre-established rules, which does not exempt deployments made to Azure. Governance in Azure further includes creating and adhering completely new set of rules, specific for cloud environment. As an example, you could be tasked with designing resource tagging policy, in order to help identify business unit, application or employees responsible for specific resource or groups of resources.&lt;/p&gt;
&lt;p&gt;In order to ensure all deployed resources are compliant, Azure allows us to define policies for different scopes, i.e directory, subscription, resource group, etc. This goes even beyond deployments, as policy rules can be applied to user accounts, RBAC and other security entities governed by Azure AD. Azure Blueprints makes work with policies more straightforward, giving us possibility to define compliant resource templates ready for deployment. Blueprints go much further than simple ARM templates, as they are backed up by Cosmos DB, available to any user or group with access rights, and provide audit log upon deployment.&lt;/p&gt;
&lt;h3 id=&#34;Miscellaneous&#34;&gt;&lt;a href=&#34;#Miscellaneous&#34; class=&#34;headerlink&#34; title=&#34;Miscellaneous&#34;&gt;&lt;/a&gt;Miscellaneous&lt;/h3&gt;&lt;p&gt;I will briefly cover further topics encountered during exam, that are not as extensive as previously mentioned ones.&lt;/p&gt;
&lt;h4 id=&#34;Networking&#34;&gt;&lt;a href=&#34;#Networking&#34; class=&#34;headerlink&#34; title=&#34;Networking&#34;&gt;&lt;/a&gt;Networking&lt;/h4&gt;&lt;p&gt;Since virtual networks are ties that bind all other Azure resources, knowing how to design and utilize them is something that can not be overlooked. As they fall within the competence of Microsoft, you will have little influence over their operation and reliability. However, architect’s responsibility lay in other areas. Modeling addressing strategy for networks and sub-networks, connecting virtual networks and on-premise systems, directing network flow via routing and load balancers, as well as establishing security boundaries and rules are just some of the skills that will be expected of you on design exam.&lt;/p&gt;
&lt;h4 id=&#34;Compute&#34;&gt;&lt;a href=&#34;#Compute&#34; class=&#34;headerlink&#34; title=&#34;Compute&#34;&gt;&lt;/a&gt;Compute&lt;/h4&gt;&lt;p&gt;Similar skills to ones required in technical exam are required, as choosing appropriate compute solution is still the main focus. There will however be additional requirements, requiring deeper knowledge of pricing tiers and respective offerings, total resource costs as well as scaling capabilities. Resource types covered by design exam are virtual machines, virtual machine scale sets, App Services, Service Fabric, Function Apps and containerized deployments. Regarding last one, make sure you understand difference between Azure Kubernetes Service and Azure Container Instances.&lt;/p&gt;
&lt;h4 id=&#34;Archiving-and-data-retention&#34;&gt;&lt;a href=&#34;#Archiving-and-data-retention&#34; class=&#34;headerlink&#34; title=&#34;Archiving and data retention&#34;&gt;&lt;/a&gt;Archiving and data retention&lt;/h4&gt;&lt;p&gt;Storing not-frequently accessed data for auditing and compliance purposes is a necessity by today’s standards. Almost all Azure storage services include an archive tier, so you should be covered whether you are using Storage Accounts, Data Lake or Azure Backup, just to name a few. You would still need to know how to calculate the costs of archiving data, as well as special conditions for storing and accessing it.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In this post I described most important topics that are covered by AZ-301: Microsoft Azure Architect Design exam. Including previous post in the series, I have covered complete curriculum for Azure Solutions Architect Expert exam in its current form.&lt;/p&gt;
&lt;p&gt;If you would have any additional questions or remarks, I am eager to hear them in the comments bellow. If you are interested in future posts from Azure and .NET world, follow me on &lt;a href=&#34;https://twitter.com/uveta&#34;&gt;Twitter&lt;/a&gt; to get notified as soon as they get published.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="azure" />
        <category term="certification" />
        <category term="advanced" />
        <updated>2020-08-19T15:48:14.000Z</updated>
    </entry>
    <entry>
        <id>https://www.uveta.io/categories/blog/ahaaas-july-2020/</id>
        <title>Ahaaas! - July 2020</title>
        <link rel="alternate" href="https://www.uveta.io/categories/blog/ahaaas-july-2020/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/categories/blog/ahaaas-july-2020/bulb.png&#34; class=&#34;&#34; title=&#34;Eureka&#34;&gt;

&lt;p&gt;In fast paced technology world, developers discover new insights practically on a daily level. Surely you have experienced these moments of almost divine wisdom, ending with “Now I know xyz can do that” or “I have to be aware of xyz” or “Eureka!”. I have recorded my moments of clarity, or Ahaaas as I call them, hoping that some of them will prove useful to you, whether you’d be dealing with .NET development, Azure or Docker.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h3 id=&#34;NET&#34;&gt;&lt;a href=&#34;#NET&#34; class=&#34;headerlink&#34; title=&#34;.NET&#34;&gt;&lt;/a&gt;.NET&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Mocking authentication in ASP.NET Core 3.0 integration tests &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/test/integration-tests#mock-authentication&#34;&gt;https://docs.microsoft.com/en-us/aspnet/core/test/integration-tests#mock-authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Even though ASP.NET Core &lt;code&gt;IConfiguration&lt;/code&gt; entry names are case-insensitive, &lt;code&gt;ConfigurationBinder.Bind()&lt;/code&gt; method is not and property name casing does matter. Prefer using &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.optionsconfigurationservicecollectionextensions.configure&#34;&gt;Configure()&lt;/a&gt; options extension method to bind configuration sections to option types.&lt;/li&gt;
&lt;li&gt;Be careful when using array values in &lt;code&gt;IConfiguration&lt;/code&gt; data sources, especially if you consider overriding with environment specific configurations &lt;a href=&#34;https://rimdev.io/avoiding-aspnet-core-configuration-pitfalls-with-array-values/&#34;&gt;https://rimdev.io/avoiding-aspnet-core-configuration-pitfalls-with-array-values/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you cannot rely on your reverse proxy, it is possible to add client and IP rate limiting to ASP.NET Core. Source code and installation instructions are available at &lt;a href=&#34;https://github.com/stefanprodan/AspNetCoreRateLimit&#34;&gt;https://github.com/stefanprodan/AspNetCoreRateLimit&lt;/a&gt;. Remember, however, that Kestrel should not be used as a public facing web server.&lt;/li&gt;
&lt;li&gt;Controller input model validation can be automated using &lt;code&gt;[ApiController]&lt;/code&gt; attribute and annotations from &lt;code&gt;DataAnnotations&lt;/code&gt; namespace &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation&#34;&gt;https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;When using &lt;code&gt;[DataMember]&lt;/code&gt; attribute to annotate serialization model properties, do not forget to add &lt;code&gt;[DataContract]&lt;/code&gt; to  enclosing type as well. Most of traditional JSON serializers, such as Newtonsoft and Jil, honor property attributes, but expect type to be annotated as well. &lt;code&gt;System.Text.Json.JsonSerializer&lt;/code&gt; surprisingly does not utilize attributes from &lt;code&gt;System.Runtime.Serialization&lt;/code&gt; namespace and uses its own &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-how-to#customize-individual-property-names&#34;&gt;annotations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cool portability tool from .NET to .NET core comes from, you wouldn’t believe it, AWS team. More details &lt;a href=&#34;https://aws.amazon.com/blogs/aws/announcing-the-porting-assistant-for-net/&#34;&gt;https://aws.amazon.com/blogs/aws/announcing-the-porting-assistant-for-net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System.Net.Mail.SmtpClient&lt;/code&gt; is obsolete for some time; recommended alternative is &lt;a href=&#34;https://github.com/jstedfast/MailKit&#34;&gt;MailKit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IApplicationLifetime&lt;/code&gt; service is obsolete from .Net Core 3.0. If you utilize generic host, use &lt;code&gt;IHostApplicationLifetime&lt;/code&gt; instead &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.iapplicationlifetime&#34;&gt;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.iapplicationlifetime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Imagine you have a concrete type implementing two different interfaces. Now imagine you register this type for each interface as a singleton in DI container. When resolving each interface, you will end up with a different instances, i.e. .NET core DI container will create two instances instead of sharing single one.&lt;/li&gt;
&lt;li&gt;If you are looking for Blazor components that you can use for commercial projects, Syncfusion offers a handful via their community license &lt;a href=&#34;https://www.syncfusion.com/products/communitylicense&#34;&gt;https://www.syncfusion.com/products/communitylicense&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Azure&#34;&gt;&lt;a href=&#34;#Azure&#34; class=&#34;headerlink&#34; title=&#34;Azure&#34;&gt;&lt;/a&gt;Azure&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;If you use sessions with Azure Service Bus, be sure to assign session identifier to messages before sending them. Service Bus will not complain if session is missing on enqueue, but will make hell for consumers on delivery and practically keep messages in queue and attempt to deliver them, until expired.&lt;/li&gt;
&lt;li&gt;You can use Azure Log Analytics to collect custom virtual machine logs &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-monitor/platform/data-sources-custom-logs&#34;&gt;https://docs.microsoft.com/en-us/azure/azure-monitor/platform/data-sources-custom-logs&lt;/a&gt;. In Portal, open your  Log Analytics workspace and go to Advanced Settings-&amp;gt;Data-&amp;gt;Custom Logs. You can also collect Windows Event and IIS Logs, as well as Linux Syslog, in a similar fashion.&lt;/li&gt;
&lt;li&gt;Data sampling, configured in Application Insight’s Usage and Estimated Costs, has no effect if you are using ASP.NET core applications without modifying telemetry sampling configuration. Ingested data can significantly increase costs, especially if Azure Functions are used, so use Daily Cap setting to get notified if the amount ingested passes the limit.&lt;/li&gt;
&lt;li&gt;Microsoft Q&amp;amp;A is generally available and should help you find any technical information regarding Azure services &lt;a href=&#34;https://docs.microsoft.com/en-us/answers/products/&#34;&gt;https://docs.microsoft.com/en-us/answers/products/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Miscellaneous&#34;&gt;&lt;a href=&#34;#Miscellaneous&#34; class=&#34;headerlink&#34; title=&#34;Miscellaneous&#34;&gt;&lt;/a&gt;Miscellaneous&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Nice overview of most commonly used open source licenses, with usage restrictions &lt;a href=&#34;https://choosealicense.com/&#34;&gt;https://choosealicense.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Steve Dunn used Blazor to recreate original Pacman &lt;a href=&#34;http://pacmanblazor.azurewebsites.net/&#34;&gt;http://pacmanblazor.azurewebsites.net&lt;/a&gt;. With a little bit of JS interop, he was able to demonstrate potential of client-side Blazor running on WebAssembly. Source code can be found on &lt;a href=&#34;https://github.com/SteveDunn/PacManBlazor&#34;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Postman automatically converts POST requests if it receives a 301 redirect status code. In this situation, it drops any request content and issues a GET request to redirecting location without any body data. This can lead to trouble, as user is never notified of such change during request execution. To avoid such issues, better turn off automatic redirects in Postman settings.&lt;/li&gt;
&lt;li&gt;Elasticsearch .NET client version 7.1.0 seems to have issues when running on .NET core 3.0. Updating client to latest version (7.8.0 at the moment of writing) seems to help.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="azure" />
        <category term="advanced" />
        <category term=".net" />
        <category term="csharp" />
        <category term="containers" />
        <updated>2020-07-25T17:12:39.000Z</updated>
    </entry>
    <entry>
        <id>https://www.uveta.io/categories/blog/azure-solutions-architect-expert-part-1/</id>
        <title>So you want to be an Azure Solutions Architect Expert - Part 1</title>
        <link rel="alternate" href="https://www.uveta.io/categories/blog/azure-solutions-architect-expert-part-1/"/>
        <content type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/categories/blog/azure-solutions-architect-expert-part-1/architect-badge.jpg&#34; class=&#34;&#34; title=&#34;Goal!!!&#34;&gt;

&lt;p&gt;This post is intended for anyone actively trying to, or considering, obtaining Azure Solutions Architect Expert certification. As I have obtained certificate near the end of 2019, I wanted to share relevant information and findings gathered prior to and after taking exams, in order to help future applicants.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;This post is part of my Azure Architect certification guide:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/categories/blog/azure-solutions-architect-expert-part-1&#34;&gt;So you want to be an Azure Solutions Architect Expert - Part 1&lt;/a&gt; (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/categories/blog/azure-solutions-architect-expert-part-2&#34;&gt;So you want to be an Azure Solutions Architect Expert - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Disclaimer: as AZ-300 and AZ-301 are being replaced with AZ-303 and AZ-304 exams late June 2020, you might find some information provided in this post to be outdated. I will try to take into account all information available for future versions and not go into details about topics that are becoming obsolete.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;Prerequisites&#34;&gt;&lt;a href=&#34;#Prerequisites&#34; class=&#34;headerlink&#34; title=&#34;Prerequisites&#34;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;In order to qualify for Azure Solutions Architect Expert certification, you are required to pass two exams: AZ-300: Microsoft Azure Architect Technologies and AZ-301: Microsoft Azure Architect Design. While AZ-300 deals mostly with skills related to deploying and configuring individual services to Azure, AZ-301 takes a deep dive into fulfilling business and system requirements such as availability, reliability, performance, as well as optimizing costs. I will focus mostly on technical aspects and go briefly through the types of questions you would encounter. Organizational information, such as exam length, scoring and how to apply, will not be a part of this post. Such instructions can be obtained from &lt;a href=&#34;https://docs.microsoft.com/en-us/learn/certifications/azure-solutions-architect&#34;&gt;Microsoft certification site&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;Where-to-find-study-materials&#34;&gt;&lt;a href=&#34;#Where-to-find-study-materials&#34; class=&#34;headerlink&#34; title=&#34;Where to find study materials&#34;&gt;&lt;/a&gt;Where to find study materials&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;microsoft-learn.png&#34; alt=&#34;Your new best friend&#34;&gt;&lt;/p&gt;
&lt;p&gt;Answer to this question is very simple: &lt;a href=&#34;https://docs.microsoft.com/&#34;&gt;Microsoft Docs&lt;/a&gt; has all the information you will ever need to prepare for this certification. The only problem is there a lot of it. Like, really a lot. Like, it would take you several lifetimes to only skim it through. Not to mention content is added to it on a daily basis. Still, official Microsoft documentation is the ultimate place where you will find answers to any question about Azure. It is also pretty easy to navigate and search for relevant information. If you have not worked with it already, take some time to familiarize yourself. Because you will be coming back to it regularly.&lt;/p&gt;
&lt;p&gt;Nick Colyer’s courses offered by &lt;a href=&#34;https://courses.skylinesacademy.com/p/az-300-301&#34;&gt;Skylines Academy&lt;/a&gt; helped me identify all relevant topics required for the exams. Both of them clock at about 20 hours in total, which could be covered in a single weekend, if you are persistent enough. The course aided me getting into meat and bones of each exam and understanding what is required to pass. I cannot recommend it enough, as the course should serve you as a starting point into further studying. As a bonus piece of information, both courses are also available on &lt;a href=&#34;https://acloud.guru/azure-cloud-training&#34;&gt;A Cloud Guru&lt;/a&gt;, which offers seven day free trial.&lt;/p&gt;
&lt;p&gt;On the other hand, Pluralsight has great paths for both &lt;a href=&#34;https://www.pluralsight.com/paths/microsoft-azure-architect-technologies-az-300&#34;&gt;AZ-300&lt;/a&gt; and &lt;a href=&#34;https://www.pluralsight.com/paths/microsoft-azure-architect-design-az-301&#34;&gt;AZ-301&lt;/a&gt; exam. Each path consists of dozen courses going into great depths of each topic covered. What I consider its greatest obstacle is the sheer amount of material, as both paths have, in total, well over 150 hours of video content. I would recommend them only to applicants who have enough time to spare. If you are not one of them, try to go through the materials at increased speed (1.2x or 1.3x works fine) or at least use them to selectively strengthen knowledge in areas you find yourself lacking. Pluralsight comes with a 10 day free trial, or, if you are lucky to have Visual Studio subscription, 3 to 6 months trial.&lt;/p&gt;
&lt;p&gt;Lastly, try to go through a couple of practice tests, especially if you have never participated in this kind of exam. Some of them are offered on &lt;a href=&#34;https://docs.microsoft.com/en-us/learn/certifications/azure-solutions-architect&#34;&gt;Certification page&lt;/a&gt;. Also, both &lt;a href=&#34;https://www.udemy.com/course/azure-architect-technologies-practice-tests-az-300-az-303&#34;&gt;AZ-300/AZ-303&lt;/a&gt; and &lt;a href=&#34;https://www.udemy.com/course/az-301-azure-architect-design-practice-test&#34;&gt;AZ-301/AZ-304&lt;/a&gt; packs can be found on Udemy.&lt;/p&gt;
&lt;h2 id=&#34;So-you-want-to-Azure-AZ-300-Microsoft-Azure-Architect-Technologies&#34;&gt;&lt;a href=&#34;#So-you-want-to-Azure-AZ-300-Microsoft-Azure-Architect-Technologies&#34; class=&#34;headerlink&#34; title=&#34;So you want to Azure (AZ-300: Microsoft Azure Architect Technologies)&#34;&gt;&lt;/a&gt;So you want to Azure (AZ-300: Microsoft Azure Architect Technologies)&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;az-300-badge.jpg&#34; alt=&#34;AZ-300: Microsoft Azure Architect Technologies&#34;&gt;&lt;/p&gt;
&lt;p&gt;With basic information out of the way, it is time to plunge ourselves into technical skills required. Exam marked as AZ-300 will put your knowledge of Azure services, deployment, configuration and networking to test.&lt;/p&gt;
&lt;h3 id=&#34;What-type-of-technology-questions-await&#34;&gt;&lt;a href=&#34;#What-type-of-technology-questions-await&#34; class=&#34;headerlink&#34; title=&#34;What type of technology questions await&#34;&gt;&lt;/a&gt;What type of technology questions await&lt;/h3&gt;&lt;p&gt;Technologies exam is a mixed bag of all &lt;a href=&#34;https://www.microsoft.com/en-us/learning/certification-exams.aspx&#34;&gt;question types&lt;/a&gt; that Microsoft is currently using. Best answer, multiple choice, drag and drop and case studies are just some of the formats you can expect.&lt;/p&gt;
&lt;p&gt;Beware, significant part of AZ-300 are also hands-on tasks done directly in simulated Azure portal. They usually involve deploying and configuring several resources according to specification. For this reason, you really need to be comfortable working with portal using GUI as well as CLI or Powershell. Read the tasks at hand thoroughly and understand what is required of you, as speed is of essence here. From my personal experience, this part of exam took nearly half of available time, which I only realized once I was finished with it. Try not to repeat my mistake.&lt;/p&gt;
&lt;h3 id=&#34;Storage-resources&#34;&gt;&lt;a href=&#34;#Storage-resources&#34; class=&#34;headerlink&#34; title=&#34;Storage resources&#34;&gt;&lt;/a&gt;Storage resources&lt;/h3&gt;&lt;p&gt;Working with different types of persistence technologies is pretty straightforward, since Azure hides most of the infrastructure details and leaves us with a pretty well-established abstractions. Although each of them can be used in multiple ways, there is usually an obvious best choice fulfilling task requirements. Typical concerns regarding service options are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Storage account. Bread-and-butter of all persistence technologies, it is used by almost all Azure services requiring storage, even without users being aware of it. As a solution architect, you are expected to know what kind of services it offers (blob, file, queue, table) as well as difference between historical versions, e.g. Gen1 and Gen2, since even obsolete ones are still being offered. For each individual service, you should understand various options offered during deployment and how do they impact created resource.&lt;/li&gt;
&lt;li&gt;CosmosDB. At the time of AZ-300 creation CosmosDB was still new kid on the block, hence most database related questions involved different types of SQL Server and DocumentDB deployments. This is changing in AZ-303, since CosmosDB is heavily featured in its curriculum as a de facto NoSQL standard in Azure. Make sure you are familiar with different application interfaces it offers and how to optimize usage based on functional requirements. Same goes for Azure SQL database, in case relational database solution is required.&lt;/li&gt;
&lt;li&gt;Azure Service Bus. Although not typically used for storage, it still offers persistence in certain scenarios. You should be aware how Service Bus is utilized as a messaging medium, and what sets it appart from services such as Event Grid and Azure Queue storage. Make sure you understand difference between queue, consumer, topic and subscribers, and when each one should be utilized.&lt;/li&gt;
&lt;li&gt;Data lake and Azure Files. These services have specific usage scenarios which you need to be aware of. While Data Lake plays a pivotal role in storing and processing extreme ammounts of data, Azure files are especially prominent in backup and migration solutions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Network-and-connectivity&#34;&gt;&lt;a href=&#34;#Network-and-connectivity&#34; class=&#34;headerlink&#34; title=&#34;Network and connectivity&#34;&gt;&lt;/a&gt;Network and connectivity&lt;/h3&gt;&lt;p&gt;Networking area is pretty straightforward, as it follows a set of explicit rules with little space to be creative. But do not even attempt to dive into it if you have knowledge gaps in topics such as IP addresses, CIDR notation, subnets, public and private ranges or what DNS is and how it works. All of these are just basis for whats to come, so make sure you handle them well first.&lt;/p&gt;
&lt;p&gt;Exam specific topics include, but are not limited to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Virtual Networks (VNETs). Learn how to plan, deploy and configure them, how to use subnets effectively, what type of resources can be deployed to virtual network and what are the limitations.&lt;/li&gt;
&lt;li&gt;Connectivity. Find out what are the options when establishing connection between VNETs, on-premise locations and individual remote peers. Any combination is plausible, sometimes even all of them, and you need to know what kind of service is adequate for given scenario. Spend some time learning about VNET peering, ExpressRoute and VPN gateway.&lt;/li&gt;
&lt;li&gt;Routing and load balancing. Although not heavily emphasized in this exam, knowledge of different network appliances is still needed. Make sure you know what is the purpose of load balancer, custom appliances, Application Gateway, Traffic Manager and Azure Front Door, as well as basic deployment and configuration steps.&lt;/li&gt;
&lt;li&gt;Security. An important topic that can easily slip you by. You need to understand default security rules for resources deployed to VNETs and how to adjust them further. Do not miss reading on Network Security Groups (NSG), how to define individual security rules and where NSGs can be applied. Also, recognize what type of threats Web Application Firewall can protect your resources from and how to deploy it.&lt;/li&gt;
&lt;li&gt;DNS. Understand various Azure DNS service offerings. Make sure you know the difference between CNAME and A record and how they are used to perform different tasks in Azure. Examples include overriding default assigned server names or exposing deployed Azure services under your specific domain.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Compute-resources&#34;&gt;&lt;a href=&#34;#Compute-resources&#34; class=&#34;headerlink&#34; title=&#34;Compute resources&#34;&gt;&lt;/a&gt;Compute resources&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;compute-decision-tree.jpg&#34; alt=&#34;Compute service decision tree&#34;&gt;&lt;/p&gt;
&lt;p&gt;Realizing difference between service models offered by Azure is the key knowledge working with compute resources. Because all of them, in the end, have single purpose: to run a piece of code or application in cloud environment. Although there are many characteristics that will come into play in the design part, main point that you should take away for technology exam is the level of responsibility you have towards individual compute resources. Good overview of all Azure offerings is required as well, so make sure terms like Virtual Machines, App Service, Azure Functions and Kubernetes Service do not fall under your radar. Deploying and configuring all of them will be required of you, especially in the hands-on part of the exam.&lt;/p&gt;
&lt;p&gt;Note that, even though Service Fabric was part of AZ-300 curriculum, it is missing from AZ-303.&lt;/p&gt;
&lt;h3 id=&#34;Monitoring-solutions&#34;&gt;&lt;a href=&#34;#Monitoring-solutions&#34; class=&#34;headerlink&#34; title=&#34;Monitoring solutions&#34;&gt;&lt;/a&gt;Monitoring solutions&lt;/h3&gt;&lt;p&gt;Tasks related to monitoring resources do not necessarily include only tools used to track performance and functionality of your deployment. Analytic services can help you optimize resource usage in order to provide more robust, flexible and often cheaper deploymen. Although complete monitoring solution often involves combination of several services, basic building blocks are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Log Analytics. Used to persist all log information. All services to follow utilize it either to store or read required data. Kusto language is used to query Log Analytics tables, but knowledge about its usage and syntax are no longer needed, as it was removed from AZ-303 curriculum.&lt;/li&gt;
&lt;li&gt;Azure Monitor. Fundamental service used to track various metrics gathered from underlying virtual machines. Although it is not deployed manually, ability to read Monitor metrics and define actions based on them will be expected of you.&lt;/li&gt;
&lt;li&gt;Application Insights. Often correlated with advanced compute resources, such as App Service and Azure Functions. How to track application metrics, logs and usage statistics is required knowledge for the exam.&lt;/li&gt;
&lt;li&gt;Action groups and Alerts. Although they represent separate entities in Azure, these two come hand in hand when developing notification solution. Double-check you are able to create alerts based on Azure resource metrics and notify appropriate targets.&lt;/li&gt;
&lt;li&gt;Azure Advisor. Even if you create advanced monitoring solution for your infrastructure and applications, covering wide range of system requirements, certain issues can slip under your radar. Azure Advisor can detect some of these automatically. It analyzes security, performance, reliability as well as cost of your deployment, and often helps optimize it based on preestablished rules. The exam will expect you to know basic issues that Azure advisor can help you solve.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Backup-and-migration&#34;&gt;&lt;a href=&#34;#Backup-and-migration&#34; class=&#34;headerlink&#34; title=&#34;Backup and migration&#34;&gt;&lt;/a&gt;Backup and migration&lt;/h3&gt;&lt;p&gt;A significant part of the curriculum is dedicated to migration from on-premise site to cloud environment, hence learning about available tools and how to utilize them is pretty much a necessity. Azure Migrate is a versatile service covering everything from analyzing on-site resource utilization, provisioning cloud counterparts and even executing planned migrations. Learning about its individual components and their specifics is the key to get by this part of the exam.&lt;/p&gt;
&lt;p&gt;On the other side, most notable backup services are covered by Azure Backup and Site Recovery. Since they play pivotal role in strengthening deployment resiliency and availability, they will be further mention during design exam post. For technological part, knowing how to deploy and configure them will suffice.&lt;/p&gt;
&lt;h3 id=&#34;Security-components&#34;&gt;&lt;a href=&#34;#Security-components&#34; class=&#34;headerlink&#34; title=&#34;Security components&#34;&gt;&lt;/a&gt;Security components&lt;/h3&gt;&lt;p&gt;Since we mentioned security several times till now, it goes without saying it plays huge role in cloud environment. Azure is no different and offers you tools to finely adjust every part of your solution.&lt;/p&gt;
&lt;p&gt;Heart of security is Azure AD, which is utilized in every aspect requiring authentication or authorization. Whether your solution is deployed purely to cloud, or you wish to combine it with on-premise resources, Azure has appropriate offering for you. Verify what the desired scenario is and know what kind of deployment is suitable.&lt;/p&gt;
&lt;p&gt;Abbreviations such as RBAC, MFA, OAuth, OpenID and SAS must mean something to you. You have to be able to control and monitor user access to Azure resources and utilize advanced options offered by premium licenses. Know how to use Managed Identity and Security Principals to control service access to Azure resources. Learn how Key Vault can help store sensitive data and how to utilize it.&lt;/p&gt;
&lt;h3 id=&#34;Deployment&#34;&gt;&lt;a href=&#34;#Deployment&#34; class=&#34;headerlink&#34; title=&#34;Deployment&#34;&gt;&lt;/a&gt;Deployment&lt;/h3&gt;&lt;p&gt;If you go back and read previous sections, the most frequent word used would probably be deployment. Since it plays a mayor role even before you start working with resources in Azure, it deserves an honorary mention.&lt;/p&gt;
&lt;p&gt;Azure Resource Manager templates, or simply ARM, is a term you will most definitely encounter when dealing with resource deployments. Understanding basic structure of ARM and how to export, as well as adjust them, will be expected of you. They can immensely help you during hands-on parts as well, especially if multiple resource deployment is required.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In this post I went through Azure Solutions Architect Expert certification prerequisites and recommended learning strategy. I have also covered most significant topics that you can encounter during first certification exam.&lt;/p&gt;
&lt;p&gt;In the next post I will go through skills and knowledge required for the second exam, i.e. AZ-301: Microsoft Azure Architect Design. Follow me on &lt;a href=&#34;https://twitter.com/uveta&#34;&gt;Twitter&lt;/a&gt; to get notified when it gets published.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content>
        <category term="azure" />
        <category term="certification" />
        <category term="advanced" />
        <updated>2020-06-26T15:48:14.000Z</updated>
    </entry>
</feed>
