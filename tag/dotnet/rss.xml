<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Uveta&#39;s blog • Posts by &#34;dotnet&#34; tag</title>
        <link>https://www.uveta.io</link>
        <description>Uveta&#39;s blog about all things Azure</description>
        <language>en,default</language>
        <pubDate>Mon, 19 Dec 2022 10:17:46 +0000</pubDate>
        <lastBuildDate>Mon, 19 Dec 2022 10:17:46 +0000</lastBuildDate>
        <category>azure</category>
        <category>certification</category>
        <category>advanced</category>
        <category>.net</category>
        <category>csharp</category>
        <category>containers</category>
        <category>microservices</category>
        <category>dotnet</category>
        <category>unity</category>
        <category>github</category>
        <category>devops</category>
        <category>begginer</category>
        <item>
            <guid isPermalink="true">https://www.uveta.io/categories/blog/github-workflow-unity-azure-static-webapps/</guid>
            <title>Using GitHub workflow to deploy Unity project to Azure Static Web Apps</title>
            <link>https://www.uveta.io/categories/blog/github-workflow-unity-azure-static-webapps/</link>
            <category>azure</category>
            <category>advanced</category>
            <category>dotnet</category>
            <category>unity</category>
            <category>github</category>
            <category>devops</category>
            <pubDate>Mon, 19 Dec 2022 10:17:46 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/categories/blog/github-workflow-unity-azure-static-webapps/github.jpg&#34; class=&#34;&#34; title=&#34;GitHub&#34;&gt;

&lt;p&gt;This post explains how to create a GitHub workflow, which builds, tests and deploys a Unity project to Azure Static Web Apps (SWA) instance. Due to foundations on which SWA was built upon, it represents a perfect way to develop and test any game built on Unity WebGL platform.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;&lt;em&gt;This post is part of &lt;strong&gt;.NET Advent 2022!&lt;/strong&gt; Check other great entries &lt;a href=&#34;https://dotnet.christmas/&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;Introduction&#34;&gt;&lt;a href=&#34;#Introduction&#34; class=&#34;headerlink&#34; title=&#34;Introduction&#34;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;I created this workflow as a part of another activity. It involved remastering Hungry Square, a game I once developed, into Unity. If you want to have the whole context, check out &lt;a href=&#34;../unity-in-21-days&#34;&gt;my other post, about how I learned Unity in 21 days&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;CI-CD-Pipeline&#34;&gt;&lt;a href=&#34;#CI-CD-Pipeline&#34; class=&#34;headerlink&#34; title=&#34;CI/CD Pipeline&#34;&gt;&lt;/a&gt;CI/CD Pipeline&lt;/h2&gt;&lt;p&gt;Forget that we are actually working with Unity. Lets consider our game project just another web application. A well-established way to write a web app CI/CD pipeline is to break it into three steps: project build, infrastructure deploy, and application bundle deploy. Lets take a deeper look into each one.&lt;/p&gt;
&lt;h3 id=&#34;Building-and-testing-Unity-project&#34;&gt;&lt;a href=&#34;#Building-and-testing-Unity-project&#34; class=&#34;headerlink&#34; title=&#34;Building and testing Unity project&#34;&gt;&lt;/a&gt;Building and testing Unity project&lt;/h3&gt;&lt;p&gt;We’re starting off in uncharted territory, at least for me. Building Unity projects was something I was not too familiar with. Luckily, good folks at &lt;a href=&#34;https://game.ci/docs/&#34;&gt;game.ci&lt;/a&gt; provide a convenient way how to work with Unity games, in GitHub environment. Setting up a build job is straightforward, and involves following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ensure Unity license, username, and password are provided to workflow, via GitHub secrets. Details on activating license and setting up secrets, depending on license type, can be found in &lt;a href=&#34;https://game.ci/docs/github/activation&#34;&gt;game.ci documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Run any tests in project using &lt;a href=&#34;https://game.ci/docs/github/test-runner&#34;&gt;game-ci/unity-test-runner&lt;/a&gt; action.&lt;/li&gt;
&lt;li&gt;Build project for all configured platforms using &lt;a href=&#34;https://game.ci/docs/github/builder&#34;&gt;game-ci/unity-builder&lt;/a&gt; action.&lt;/li&gt;
&lt;li&gt;Optionally, use &lt;a href=&#34;https://github.com/actions/cache&#34;&gt;actions/cache&lt;/a&gt; action to cache dynamic project files. This often reduces build time dramatically.&lt;/li&gt;
&lt;li&gt;Finally, make build output available to succeeding jobs via &lt;a href=&#34;https://github.com/actions/upload-artifact&#34;&gt;actions/upload-artifact&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;script src=&#34;https://gist.github.com/uveta/16b5583b4d2961cd16994404320f1f10.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;If all steps have finished without an error, we should end up with an artifact containing our application bundle.&lt;/p&gt;
&lt;h3 id=&#34;Infrastructure&#34;&gt;&lt;a href=&#34;#Infrastructure&#34; class=&#34;headerlink&#34; title=&#34;Infrastructure&#34;&gt;&lt;/a&gt;Infrastructure&lt;/h3&gt;&lt;p&gt;When setting up this type of projects, we should make no assumptions about existing deployment environment. It is why I have included a job to create all necessary infrastructure. There is an abundance of ways how to programmatically deploy to Azure (CLI, PowerShell, Terraform, etc.), each one with its pros and cons. In our case, the optimal way was using Bicep domain-specific language, which offers a good balance between complexity, robustness and extensibility. For this purpose, we will deploy a resource group, in which a SWA instance will be created. All necessary templates can be found in &lt;a href=&#34;https://github.com/uveta/hungry-square-unity/tree/main/infra&#34;&gt;./infra&lt;/a&gt; directory.&lt;/p&gt;
&lt;p&gt;As with almost all actions in Azure, Bicep deployment has to be preceded with an Azure login step. Detailed instructions on how to setup subscription identifier and login credentials, using GitHub secrets, can be found in &lt;a href=&#34;https://github.com/Azure/login&#34;&gt;Azure login action documentation&lt;/a&gt;. Subsequent Bicep deployment is done using &lt;a href=&#34;https://github.com/Azure/arm-deploy&#34;&gt;azure/arm-deploy&lt;/a&gt; action.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/uveta/c4542f2218751bb128ffa48b4106c06d.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;Deploying-to-Azure-Static-Web-Apps&#34;&gt;&lt;a href=&#34;#Deploying-to-Azure-Static-Web-Apps&#34; class=&#34;headerlink&#34; title=&#34;Deploying to Azure Static Web Apps&#34;&gt;&lt;/a&gt;Deploying to Azure Static Web Apps&lt;/h3&gt;&lt;p&gt;Deployment of application bundle to a SWA instance consists of two steps (or four if you are nitpicking and want to include artifact download and Azure login). Prior to actual upload, a deployment token for SWA must be obtained. We will use &lt;a href=&#34;https://github.com/Azure/cli&#34;&gt;Azure CLI&lt;/a&gt; to get it and store it in a job environment variable &lt;em&gt;SWA_DEPLOYMENT_TOKEN&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Uploading build output to SWA is done using &lt;a href=&#34;https://github.com/Azure/static-web-apps-deploy&#34;&gt;azure/static-web-apps-deploy&lt;/a&gt; action. In our case, following parameters have to be included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;azure_static_web_apps_api_token&lt;/strong&gt;, a deployment token obtained in previous step&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;repo_token&lt;/strong&gt;, a GitHub token with appropriate permissions, which action will use to provide URL to access our application&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;app_location&lt;/strong&gt;, directory or file to upload to SWA, which is in our case &lt;em&gt;./build/WebGL/WebGL&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;script src=&#34;https://gist.github.com/uveta/00d40c2d5ddae36762a05cb0b1f8fe94.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;Bonus-environment-tear-down&#34;&gt;&lt;a href=&#34;#Bonus-environment-tear-down&#34; class=&#34;headerlink&#34; title=&#34;Bonus (environment tear down)&#34;&gt;&lt;/a&gt;Bonus (environment tear down)&lt;/h3&gt;&lt;p&gt;After a pull request is merged or abandoned, and a feature branch was deleted, it is appropriate to clean up associated SWA environment. This can easily be done via &lt;a href=&#34;https://github.com/uveta/hungry-square-unity/blob/main/.github/workflows/teardown.yaml&#34;&gt;tear down workflow&lt;/a&gt;, which also uses &lt;a href=&#34;https://github.com/Azure/static-web-apps-deploy&#34;&gt;SWA action&lt;/a&gt;. Similar to code upload, a deployment token has to be obtained first. Afterwards, an SWA action with action parameter set to &lt;em&gt;close&lt;/em&gt; is executed, which will remove environment associated with current git branch.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/uveta/6438618e956a75217f42915bd007a6fd.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;Final-thoughts&#34;&gt;&lt;a href=&#34;#Final-thoughts&#34; class=&#34;headerlink&#34; title=&#34;Final thoughts&#34;&gt;&lt;/a&gt;Final thoughts&lt;/h2&gt;&lt;p&gt;After spending couple of days, making sure that the project is built and deployed properly, I can give you some tips to make designing your future workflow more smooth:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure you add &lt;em&gt;.gitattributes&lt;/em&gt; with proper Git LFS definitions early, ideally before including any asset. Although git makes migration of committed assets to LFS super convenient, it requires rewriting branch history and force pushing it. Not something you really want to do, if you have a whole team collaborating on a project.&lt;/li&gt;
&lt;li&gt;Unity build action will fail, if source files were modified after checkout. As a last resort, you can force execution of a dirty build, using &lt;em&gt;game-ci/unity-builder&lt;/em&gt; action parameters.&lt;/li&gt;
&lt;li&gt;Double-check all included scenes in Unity Editor, in File-&amp;gt;Build Settings-&amp;gt;Scenes In Build. In case of any issue with scenes, build error will not help you much.&lt;/li&gt;
&lt;li&gt;It might not be clear what is the correct path of application bundle in build artifact, as it is located under a couple of levels of directories. Verify path by manually downloading artifact bundle, and adjust &lt;em&gt;app_location&lt;/em&gt; parameter of &lt;em&gt;azure/static-web-apps-deploy&lt;/em&gt; step accordingly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;There you have it, a workflow to help you get any Unity WebGL project up and running in minutes. You can check out the final CI/CD workflow &lt;a href=&#34;https://github.com/uveta/hungry-square-unity/blob/main/.github/workflows/ci.yaml&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.uveta.io/categories/blog/unity-in-21-days/</guid>
            <title>Unity in 21 days</title>
            <link>https://www.uveta.io/categories/blog/unity-in-21-days/</link>
            <category>dotnet</category>
            <category>unity</category>
            <category>begginer</category>
            <pubDate>Mon, 19 Dec 2022 10:17:32 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/categories/blog/unity-in-21-days/pixelart.jpg&#34; class=&#34;&#34; title=&#34;Pixel Art&#34;&gt;

&lt;p&gt;The title might be a bit misleading. If you assumed this post would be yet another Unity tutorial, it is not quite the case. Teaching you complex framework, such as Unity, in just about three weeks, is something I could never promise. It is more of a story of how I rewrote my high school project, written in Turbo Pascal, without having any real experience with Unity. Because, why not. And I have been postponing learning a thing or two about Unity for quite some time.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;&lt;em&gt;This post is part of &lt;a href=&#34;https://www.csadvent.christmas/&#34;&gt;C# Advent Calendar 2022&lt;/a&gt;. Cheers to &lt;a href=&#34;https://twitter.com/CsAdvent&#34;&gt;C# Advent&lt;/a&gt; for letting me participate!&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;Introduction&#34;&gt;&lt;a href=&#34;#Introduction&#34; class=&#34;headerlink&#34; title=&#34;Introduction&#34;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;It has been so long since high school that, once I decided to go down this path, I had no chance to retrieve original game I developed, including source code. All I had was a fond memory of a game called Hungry Square, and a vague image of how the game looked like. It was as simple as it gets. You are a square on a two-dimensional plane, that can move in any of the four directions. Food is spawned randomly around game area. Once the square eats it, game would speed up, and an enemy would pop up and start bouncing around the screen. The objective of Hungry Square is to eat as much food as you can, without being hit by an enemy or colliding with the edge of the screen. Quite simple, right? It is the exact reason why I chose this project to fiddle with Unity.&lt;/p&gt;
&lt;p&gt;If you want to skip the story, and jump straight into the game, you can do so &lt;a href=&#34;https://red-plant-049cdf903.2.azurestaticapps.net/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Day-1&#34;&gt;&lt;a href=&#34;#Day-1&#34; class=&#34;headerlink&#34; title=&#34;Day 1&#34;&gt;&lt;/a&gt;Day 1&lt;/h2&gt;&lt;p&gt;There is always one question, when trying to learn a topic that you know nothing about: where to even start? Good tutorial goes a long way, and this has been a mantra that I have been using successfully through the years. Just finding one and flipping through it should help get our feet on the ground, and build from there on. In Unity’s case, I have found a nice &lt;a href=&#34;https://blog.sentry.io/2022/03/21/unity-tutorial-what-you-need-to-know-before-developing-your-first-unity-game&#34;&gt;four-parter on Sentry.io blog&lt;/a&gt;, going from basics of installing necessary tools, all the way to publishing finished game to Google Play Store. Lets get to reading!&lt;/p&gt;
&lt;h2 id=&#34;Day-2&#34;&gt;&lt;a href=&#34;#Day-2&#34; class=&#34;headerlink&#34; title=&#34;Day 2&#34;&gt;&lt;/a&gt;Day 2&lt;/h2&gt;&lt;p&gt;Took me two days to read through all four posts and, although I haven’t tried a single part of tutorial, I already feel more confident with whole endeavor. As I got familiar with Unity capabilities, a project manager in me already wants to establish some goals. I must remaster original game, and enhance it as much as possible. Since original offered pretty bare-bones experience, some animations and sounds would round it up nicely. As with almost everything I do these days, remaster should be available to play from web browser. I should try to add an Android version as well.&lt;/p&gt;
&lt;h2 id=&#34;Day-3&#34;&gt;&lt;a href=&#34;#Day-3&#34; class=&#34;headerlink&#34; title=&#34;Day 3&#34;&gt;&lt;/a&gt;Day 3&lt;/h2&gt;&lt;p&gt;Finally installed and ran &lt;a href=&#34;https://unity.com/downloads&#34;&gt;Unity Hub and Editor&lt;/a&gt;. I ignore available samples and create an empty project, using 2D template. It takes approximately seven minutes to create a new project, and another three just to build it for a WebGL platform. Hopefully further development will not take that much time. For a project without a single asset or line of code, build produced a 2.5 Mb large WebAssembly bundle. Not great, not terrible.&lt;/p&gt;
&lt;h2 id=&#34;Day-4&#34;&gt;&lt;a href=&#34;#Day-4&#34; class=&#34;headerlink&#34; title=&#34;Day 4&#34;&gt;&lt;/a&gt;Day 4&lt;/h2&gt;&lt;p&gt;I start by trying to create a simple scene with a bordered background. After spending couple of hours, my initial confidence subsides. Once I started using Unity Editor, I was quickly overwhelmed with number of concepts, windows, and options. Maybe this project will not be a matter of just couple of days, as I initially thought.&lt;/p&gt;
&lt;h2 id=&#34;Day-5&#34;&gt;&lt;a href=&#34;#Day-5&#34; class=&#34;headerlink&#34; title=&#34;Day 5&#34;&gt;&lt;/a&gt;Day 5&lt;/h2&gt;&lt;p&gt;Still trying to add background, but there is almost no progress. Looks like I’ll have to reconsider learning on the fly, and actually dive more deeper into basic  Unity concepts. That said, quick search through &lt;a href=&#34;https://learn.unity.com/&#34;&gt;Unity’s learn portal&lt;/a&gt; reveals &lt;a href=&#34;https://learn.unity.com/project/ruby-s-2d-rpg&#34;&gt;Ruby’s Adventure&lt;/a&gt;, a tutorial on building 2D game. Decided to give it a try, as it covers all the parts I will probably need.&lt;/p&gt;
&lt;p&gt;First chapter explains basic parts of Unity Editor. I learned what all windows are used for, and how to switch between scene and play mode. Next one covers adding game objects and manipulating camera. Managed to add player object (Ruby) and define it’s health.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hint: if you are not seeing camera bounds in scene, select camera object and assign MainCamera tag to it.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;Day-6&#34;&gt;&lt;a href=&#34;#Day-6&#34; class=&#34;headerlink&#34; title=&#34;Day 6&#34;&gt;&lt;/a&gt;Day 6&lt;/h2&gt;&lt;p&gt;Learning more about keyboard input and how to use it to move game objects. I found out there is old and new input system, but cannot tell what the difference is. Decided to stick with the old one, as it is used in Ruby’s Adventure.&lt;/p&gt;
&lt;p&gt;Next up is drawing background tiles and creating world map. Quite intuitive and quite easy to do, assuming you have the right assets. One thing I noticed is that this part of tutorial is pretty outdated, compared to current Unity version. With tutorial being barely two years old, things seem to be moving at a rapid pace in Unity world!&lt;/p&gt;
&lt;h2 id=&#34;Day-7&#34;&gt;&lt;a href=&#34;#Day-7&#34; class=&#34;headerlink&#34; title=&#34;Day 7&#34;&gt;&lt;/a&gt;Day 7&lt;/h2&gt;&lt;p&gt;Following couple of chapters dealt with game object visibility and physics system. I learned how to order overlapping objects and what a pivot is. I am not sure I will use this knowledge when working on Hungry Square, as there is almost no overlapping between game elements. However, I also learned how to create prefabs, which are used as templates for objects in scene. When thinking about enemies and food, which are added to scene dynamically, prefabs seem like a natural way how to implement them.&lt;/p&gt;
&lt;p&gt;When it comes to physics, Unity’s system revolves around rigid body and collider components, which are used to model and detect game object interactions. Not sure I will ever utilize these components.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note from Day 11: rigid body and collider are essential components for Hungry Square remaster. They are extensively used to detect interactions between player, food and enemies, as well as model enemy movement in game world. And I thought I would never use them…&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;Day-8&#34;&gt;&lt;a href=&#34;#Day-8&#34; class=&#34;headerlink&#34; title=&#34;Day 8&#34;&gt;&lt;/a&gt;Day 8&lt;/h2&gt;&lt;p&gt;Next tutorial chapter taught me how to add moving enemies to the scene, and how to detect when a player collides with them. Learned how to create animations, using sprites, controllers and state machines. Animated movement of both player and enemies, for extra polish. After all, no one likes static objects. As a next step, I added projectiles, so the player can defend against enemies. Learned about collision layers, which made sure projectiles collide only with enemies.&lt;/p&gt;
&lt;p&gt;One small thing that tutorial also went through is moving from a static camera, to one that will follows player. As I plan to have a single screen as playable area, I might not need this type of camera. Will keep it in reserve anyways.&lt;/p&gt;
&lt;p&gt;Following part taught me how to make the game even more visually appealing, by using particles. Utilized them to create smoke effect on enemies. I might need them if I decide to go for extra polish for my remaster. One example would be adding particle effects on food and enemy spawn.&lt;/p&gt;
&lt;h2 id=&#34;Day-9&#34;&gt;&lt;a href=&#34;#Day-9&#34; class=&#34;headerlink&#34; title=&#34;Day 9&#34;&gt;&lt;/a&gt;Day 9&lt;/h2&gt;&lt;p&gt;Nearing the end of tutorial. This chapter showed me how to create scene overlay, which will be used to show player health bar. It is rather complicated to accomplish, event with detailed instructions and assets available out of the box. In the end, I might not even need, as Hungry Square ends as soon as the player is hit by an enemy.&lt;/p&gt;
&lt;p&gt;Next part is about creating non-playable characters and interacting with them. It also shows how to create dialog and quests. As none of these features are planned for Hungry Square, I decided to skip this tutorial altogether. Might come back to it eventually, for completeness sake.&lt;/p&gt;
&lt;h2 id=&#34;Day-10&#34;&gt;&lt;a href=&#34;#Day-10&#34; class=&#34;headerlink&#34; title=&#34;Day 10&#34;&gt;&lt;/a&gt;Day 10&lt;/h2&gt;&lt;p&gt;Last few tutorials dealt with quite important concepts. First one taught me how to add audio listeners, and how to produce 2D and 3D sounds. If I find suitable audio clips, I might add them to objects in my game.&lt;/p&gt;
&lt;p&gt;Finally, I learned how to build the whole project into an executable. Realized that I had wrong platform selected the entire time, so I switched to WebGL. Analyzed and tried to learn about all available options, as WebGL will be my primary platform.&lt;/p&gt;
&lt;h2 id=&#34;Day-11&#34;&gt;&lt;a href=&#34;#Day-11&#34; class=&#34;headerlink&#34; title=&#34;Day 11&#34;&gt;&lt;/a&gt;Day 11&lt;/h2&gt;&lt;p&gt;With all tutorials completed, it is time to finally start working on Hungry Square remaster! With all important Unity concepts still fresh in my head, I manage to get a lot of work done on first sitting. Immediately found some free sprite assets in the shape of a square, and used them to create prefabs for player, enemies and food. Instead of handling enemy movement on my own, like in the original game, I try to utilize Unity physics system. All I had to was create an edge collider around game area, assign absolutely elastic material to it, and do the same for each enemy. On enemy spawn, an impulse force was applied to its rigid body, and physics system took care of the rest. Easy peasy!&lt;/p&gt;
&lt;p&gt;To detect player collisions, I have added colliders to player, enemies and food, and assigned proper tags to each. Had to prevent enemies from crashing into food, so moved each one to dedicated collision layer, and turned off interactions between them.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Issue detected: enemies are configured to speed up after each edge bounce, before I introduce concept of game speed. Noticed that after some time, enemies get so fast, that they skip screen edge collider, and simply disappear out of the game. Funny thing to occur, sine the original game had the exact same problem, due to enemy position after bounce being miscalculated sometimes. Something I must not forget to fix later.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;Day-12&#34;&gt;&lt;a href=&#34;#Day-12&#34; class=&#34;headerlink&#34; title=&#34;Day 12&#34;&gt;&lt;/a&gt;Day 12&lt;/h2&gt;&lt;p&gt;This time I focused on adding game logic. Handled player collision with enemy, screen edge and food. Soon I will have to introduce concept of scoring, as well as create game over screen to show in the end.&lt;/p&gt;
&lt;p&gt;After eating food, game spawns another enemy and food at random location. It works, but I am not happy with implementation. Player and game objects reference all prefabs, in order to dynamically create them or invoke their methods. Will try to look for a better solution, and reduce coupling between objects.&lt;/p&gt;
&lt;p&gt;Spent some time investigating disappearing enemy issue. It seems that this is a known limitation of Unity’s physics engine, which checks collisions only at fixed points in time. Fixing such behavior can only be achieved by limiting maximum object speed. Enemies should not be allowed to go through screen edge in one fixed update, so I will set maximum speed to enemy length divided by period of fixed update. Seemed to help, as I don’t detect any enemies dropping out of the game area anymore.&lt;/p&gt;
&lt;h2 id=&#34;Day-13&#34;&gt;&lt;a href=&#34;#Day-13&#34; class=&#34;headerlink&#34; title=&#34;Day 13&#34;&gt;&lt;/a&gt;Day 13&lt;/h2&gt;&lt;p&gt;Found a way to implement prefab registry, using dedicated singleton object. Reworked all types to use prefab registry, instead of assigning them as properties. I am sure there is an even better way to reference prefabs from game objects, but hey, I am not a professional Unity developer &lt;span class=&#34;github-emoji&#34; alias=&#34;smile&#34; style=&#34;&#34; fallback-src=&#34;https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8&#34;&gt;😄&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;Day-14&#34;&gt;&lt;a href=&#34;#Day-14&#34; class=&#34;headerlink&#34; title=&#34;Day 14&#34;&gt;&lt;/a&gt;Day 14&lt;/h2&gt;&lt;p&gt;Today I mostly dealt with endgame features. Went through a tutorial on how to implement game over screen, and added it to Hungry Square. It will be shown on collision with either enemy or screen edge. After finishing the game, it is possible to restart it via menu button. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Issue detected: After restarting game, I noticed that keyboard input is not detected anymore, even though player and initial food objects are spawned correctly. Might be just a minor hiccup because of whole scene reload, but surely something I need to address soon.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;Day-15&#34;&gt;&lt;a href=&#34;#Day-15&#34; class=&#34;headerlink&#34; title=&#34;Day 15&#34;&gt;&lt;/a&gt;Day 15&lt;/h2&gt;&lt;p&gt;Used Game Controller to centralize game speed, instead of spreading it through various scripts. Player and enemy movement will be adjusted based on this value, which is increasing by couple of percent each time a player consumes food. Works well, and I remove enemy speedup on screen edge bounce.&lt;/p&gt;
&lt;p&gt;Input is still not working after game restart, event though I tried couple of fixes. Will have to check if it happens in built game as well, but I am starting to get worried.&lt;/p&gt;
&lt;h2 id=&#34;Day-16&#34;&gt;&lt;a href=&#34;#Day-16&#34; class=&#34;headerlink&#34; title=&#34;Day 16&#34;&gt;&lt;/a&gt;Day 16&lt;/h2&gt;&lt;p&gt;Since I wanted to test built version anyways, I dedicated all available time today to get CI/CD pipeline up and running. Had a lot of fun discovering how Unity games are built and tested, and how to deploy build output. So much fun actually, that I documented the whole process &lt;a href=&#34;../github-workflow-unity-azure-static-webapps&#34;&gt;in a companion article&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Day-17&#34;&gt;&lt;a href=&#34;#Day-17&#34; class=&#34;headerlink&#34; title=&#34;Day 17&#34;&gt;&lt;/a&gt;Day 17&lt;/h2&gt;&lt;p&gt;Finally managed to solve non-responsive inputs after game is restarted. Turns out inputs were working fine the whole time, but the game remained paused after scene reload. Adjusted time scale after scene reload, and the game runs as expected. Crisis averted!&lt;/p&gt;
&lt;p&gt;Continuing to work on improving overall player experience. Food and enemies were spawning randomly, which sometimes caused immediate collision with player. Adjusted this behavior to a more predictable pattern, and made them spawn randomly on the opposite space of playable area. Also started tracking score and using game over screen to show it to the player.&lt;/p&gt;
&lt;h2 id=&#34;Day-18&#34;&gt;&lt;a href=&#34;#Day-18&#34; class=&#34;headerlink&#34; title=&#34;Day 18&#34;&gt;&lt;/a&gt;Day 18&lt;/h2&gt;&lt;p&gt;Encountered an issue on game over screen, happening for built game only. An exception was being thrown, but it was impossible to find out what part of code was causing it. Had to learn how to produce a debug build and expose exception call stack. Turns out an instance of a text field was not properly assigned to game over screen, which caused a NullReferenceException. However, this issue does not arise in play mode. Strange… Solved it by reassigning text field instance to game over object.&lt;/p&gt;
&lt;h2 id=&#34;Day-19&#34;&gt;&lt;a href=&#34;#Day-19&#34; class=&#34;headerlink&#34; title=&#34;Day 19&#34;&gt;&lt;/a&gt;Day 19&lt;/h2&gt;&lt;p&gt;Worked on quality of life improvements. Player, food and enemy collision areas were too big, so I decided to reduce them to fit actual shape of each object. By increasing main sprite pixels per unit a bit, made all relevant objects smaller, and made the game area look a bit bigger. I guess I could have achieved similar behavior by moving the camera a bit further from the player.&lt;/p&gt;
&lt;h2 id=&#34;Day-20&#34;&gt;&lt;a href=&#34;#Day-20&#34; class=&#34;headerlink&#34; title=&#34;Day 20&#34;&gt;&lt;/a&gt;Day 20&lt;/h2&gt;&lt;p&gt;Added main menu and included a small game description. Initially I wanted to implement it in the same way as game over screen, but soon realized that it is better to extract it to a separate scene. Main menu scene will be shown first and, once start button is pressed, game scene will be loaded.&lt;/p&gt;
&lt;h2 id=&#34;Day-21&#34;&gt;&lt;a href=&#34;#Day-21&#34; class=&#34;headerlink&#34; title=&#34;Day 21&#34;&gt;&lt;/a&gt;Day 21&lt;/h2&gt;&lt;p&gt;Putting in last few tweaks and doing a final round of testing. Everything seems to be in order, and Hungry Square remastered is ready to be shipped!&lt;/p&gt;
&lt;h2 id=&#34;Final-thoughts&#34;&gt;&lt;a href=&#34;#Final-thoughts&#34; class=&#34;headerlink&#34; title=&#34;Final thoughts&#34;&gt;&lt;/a&gt;Final thoughts&lt;/h2&gt;&lt;p&gt;It has been quite a ride. My initial assumption, that I would rework the game in couple of days, turned into endeavor that lasted almost the whole month. Nevertheless, I am quite happy with the end product, especially because I managed to combine it with other thing I love - Azure!&lt;/p&gt;
&lt;p&gt;On the other hand, I am not so satisfied that remaster is still pretty bare-bones. Visually nothing much changed from a 20 year old game, and the lack of animations and sounds makes the game look very rudimentary. Surely something I will seek to correct in the future. But for now, I think I have a pretty good base to build upon.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;If you ever think about going the same path as me, I hope this post would help you avoid making mistakes that I did. Although Unity is complex, learning about it’s various concepts can be quite fun. It is used to make games, after all.&lt;/p&gt;
&lt;p&gt;Coming back to Hungry Square, the game is up and running in an Azure Static Web Apps instance, and it will remain deployed there for the time being. You can see the final result, and try it out &lt;a href=&#34;https://red-plant-049cdf903.2.azurestaticapps.net/&#34;&gt;via an URL that was randomly assigned by Azure Static Web Apps&lt;/a&gt; (sorry for any anti-virus alerts I caused). My high score is 24, can you try to beat it? Let me know!&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.uveta.io/categories/blog/unclutter-startup-cs/</guid>
            <title>Unclutter Startup.cs</title>
            <link>https://www.uveta.io/categories/blog/unclutter-startup-cs/</link>
            <category>azure</category>
            <category>advanced</category>
            <category>dotnet</category>
            <pubDate>Sat, 18 Dec 2021 14:00:09 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/categories/blog/unclutter-startup-cs/calendar.jpg&#34; class=&#34;&#34; title=&#34;Advent calendar&#34;&gt;

&lt;p&gt;Configuring service container and setting up request pipeline in ASP.NET Core can eat up a lot of lines of code, especially for more complex projects. A well-established way of doing this is using &lt;em&gt;Startup.cs&lt;/em&gt; and its &lt;code&gt;ConfigureServices()&lt;/code&gt; and &lt;code&gt;Configure()&lt;/code&gt; methods. Although complete application setup can be packed into a single type, we must not forget about Single-responsibility principle. I wanted to show you a way to prevent startup from growing uncontrollably, by keeping different concerns separate from each other.&lt;/p&gt;
&lt;p&gt;One disclaimer though. ASP.NET Core 6 has rolled in and removed the need of having &lt;em&gt;Startup.cs&lt;/em&gt; altogether. Despite that fact, I am sure the ideas presented in this post will be relevant, even in the new era.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;&lt;em&gt;This post is part of &lt;a href=&#34;https://www.csadvent.christmas/&#34;&gt;C# Advent Calendar 2021&lt;/a&gt;. Cheers to &lt;a href=&#34;https://twitter.com/mgroves&#34;&gt;Matthew D. Groves&lt;/a&gt; for letting me participate!&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;Basic-principles&#34;&gt;&lt;a href=&#34;#Basic-principles&#34; class=&#34;headerlink&#34; title=&#34;Basic principles&#34;&gt;&lt;/a&gt;Basic principles&lt;/h2&gt;&lt;p&gt;We will apply two .NET features: &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options&#34;&gt;Options pattern&lt;/a&gt; and &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods&#34;&gt;Extension methods&lt;/a&gt;. Similar to how ASP.NET Core uses plugin architecture, we will utilize these features to separate concerns and leave heavy lifting to dependency injection container.&lt;/p&gt;
&lt;p&gt;One design standard, to keep in mind, is that almost all parts of ASP.NET Core are configured via &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.options.ioptions-1&#34;&gt;IOptions&lt;toptions&gt;&lt;/toptions&gt;&lt;/a&gt; pattern. And, since all &lt;code&gt;IOptions&amp;lt;TOptions&amp;gt;&lt;/code&gt; instances are part of service container, we can use &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options#use-di-services-to-configure-options&#34;&gt;IConfigureOptions&lt;toptions&gt;&lt;/toptions&gt;&lt;/a&gt; or &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options#options-post-configuration&#34;&gt;IPostConfigureOptions&lt;toptions&gt;&lt;/toptions&gt;&lt;/a&gt; to override any one of them.&lt;/p&gt;
&lt;h2 id=&#34;MVC&#34;&gt;&lt;a href=&#34;#MVC&#34; class=&#34;headerlink&#34; title=&#34;MVC&#34;&gt;&lt;/a&gt;MVC&lt;/h2&gt;&lt;p&gt;Whether you are using Controllers only, or including Views or Razor Pages, MVC setup is more or less the same. The goal is to call &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.mvcservicecollectionextensions.addcontrollers&#34;&gt;AddControllers()&lt;/a&gt;, &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.mvcservicecollectionextensions.addcontrollerswithviews&#34;&gt;AddControllersWithViews()&lt;/a&gt; or &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.mvcservicecollectionextensions.addrazorpages&#34;&gt;AddRazorPages()&lt;/a&gt;, based on your scenario, and define configuration for &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.mvcoptions&#34;&gt;MvcOptions&lt;/a&gt;, and possibly &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.razorpages.razorpagesoptions&#34;&gt;RazorPagesOptions&lt;/a&gt;. If you are using &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.text.json.jsonserializer&#34;&gt;System.Text.Json&lt;/a&gt; or &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.AspNetCore.Mvc.NewtonsoftJson&#34;&gt;Newtonsoft Json.NET&lt;/a&gt; for model serialization, you could also configure them in a similar manner. Whole setup would look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;MvcExtensions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; IServiceCollection &lt;span class=&#34;hljs-title&#34;&gt;ConfigureMvc&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;this&lt;/span&gt; IServiceCollection services&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddControllers().AddNewtonsoftJson();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSingleton&amp;lt;IConfigureOptions&amp;lt;MvcOptions&amp;gt;, ConfigureMvcOptions&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSingleton&amp;lt;IConfigureOptions&amp;lt;MvcNewtonsoftJsonOptions&amp;gt;, ConfigureNewtonsoftOptions&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; services;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ConfigureMvcOptions&lt;/span&gt; : &lt;span class=&#34;hljs-title&#34;&gt;IConfigureOptions&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;MvcOptions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Configure&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;MvcOptions options&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.SuppressAsyncSuffixInActionNames = &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ConfigureNewtonsoftOptions&lt;/span&gt; : &lt;span class=&#34;hljs-title&#34;&gt;IConfigureOptions&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;MvcNewtonsoftJsonOptions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Configure&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;MvcNewtonsoftJsonOptions options&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.SerializerSettings.Converters.Add(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; StringEnumConverter());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Authentication&#34;&gt;&lt;a href=&#34;#Authentication&#34; class=&#34;headerlink&#34; title=&#34;Authentication&#34;&gt;&lt;/a&gt;Authentication&lt;/h2&gt;&lt;p&gt;Completely driving authentication by configuration is difficult. You probably need to know what type of authentication your application uses in advance. Good news is that, once baseline is established, you can use above mentioned technique to configure individual parts. For example, you would use &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authentication.cookies.cookieauthenticationoptions&#34;&gt;CookieAuthenticationOptions&lt;/a&gt; to configure cookies, and &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authentication.jwtbearer.jwtbeareroptions&#34;&gt;JwtBearerOptions&lt;/a&gt; for token based authentication. Extension and individual configuration options, including an example of injecting IConfiguration into one of them, would look like this:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AuthenticationExtensions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; IServiceCollection &lt;span class=&#34;hljs-title&#34;&gt;ConfigureAuthentication&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;this&lt;/span&gt; IServiceCollection services&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddAuthentication().AddCookie().AddJwtBearer();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSingleton&amp;lt;IConfigureOptions&amp;lt;AuthenticationOptions&amp;gt;, ConfigureAuthenticationOptions&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSingleton&amp;lt;IConfigureOptions&amp;lt;CookieAuthenticationOptions&amp;gt;, ConfigureCookieAuthenticationOptions&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSingleton&amp;lt;IConfigureOptions&amp;lt;JwtBearerOptions&amp;gt;, ConfigureJwtBearerOptions&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; services;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ConfigureAuthenticationOptions&lt;/span&gt; : &lt;span class=&#34;hljs-title&#34;&gt;IConfigureOptions&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;AuthenticationOptions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Configure&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;AuthenticationOptions options&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ConfigureCookieAuthenticationOptions&lt;/span&gt; : &lt;span class=&#34;hljs-title&#34;&gt;IConfigureOptions&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;CookieAuthenticationOptions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Configure&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;CookieAuthenticationOptions options&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.ExpireTimeSpan = TimeSpan.FromHours(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ConfigureJwtBearerOptions&lt;/span&gt; : &lt;span class=&#34;hljs-title&#34;&gt;IConfigureOptions&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;JwtBearerOptions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;readonly&lt;/span&gt; IConfiguration _configuration;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ConfigureJwtBearerOptions&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;IConfiguration configuration&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        _configuration = configuration;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Configure&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;JwtBearerOptions options&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.Authority = _configuration.GetValue&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&#34;hljs-string&#34;&gt;&#34;jwt:authority&#34;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.RequireHttpsMetadata = &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.IncludeErrorDetails = &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Authorization&#34;&gt;&lt;a href=&#34;#Authorization&#34; class=&#34;headerlink&#34; title=&#34;Authorization&#34;&gt;&lt;/a&gt;Authorization&lt;/h2&gt;&lt;p&gt;Configuring authorization can get quite tedious, if number or complexity of policies increases. Luckily, setup process is pretty straightforward, as the only concern is injecting configuration via &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authorization.authorizationoptions&#34;&gt;AuthorizationOptions&lt;/a&gt; type.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;AuthorizationExtensions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; IServiceCollection &lt;span class=&#34;hljs-title&#34;&gt;ConfigureAuthorization&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;this&lt;/span&gt; IServiceCollection services&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddAuthorization();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSingleton&amp;lt;IConfigureOptions&amp;lt;AuthorizationOptions&amp;gt;, ConfigureAuthorizationOptions&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; services;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ConfigureAuthorizationOptions&lt;/span&gt; : &lt;span class=&#34;hljs-title&#34;&gt;IConfigureOptions&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;AuthorizationOptions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Configure&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;AuthorizationOptions options&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.DefaultPolicy = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; AuthorizationPolicyBuilder().RequireAuthenticatedUser().Build();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;OpenAPI&#34;&gt;&lt;a href=&#34;#OpenAPI&#34; class=&#34;headerlink&#34; title=&#34;OpenAPI&#34;&gt;&lt;/a&gt;OpenAPI&lt;/h2&gt;&lt;p&gt;If you care about your REST API consumers, you are publishing service description, using OpenAPI specification. And, since we are talking about ASP.NET Core, you are probably using awesome &lt;a href=&#34;https://www.nuget.org/packages/Swashbuckle.AspNetCore&#34;&gt;Swashbuckle&lt;/a&gt; package. As with previously mentioned framework parts, this extension was designed on same principles, and can be setup in a similar fashion. Whether its generating definition file using &lt;code&gt;SwaggerGenOptions&lt;/code&gt;, or adjusting swagger user interface via &lt;code&gt;SwaggerUIOptions&lt;/code&gt;, everything can be broken down and put into separate types.&lt;/p&gt;
&lt;figure class=&#34;highlight csharp hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;OpenApiExtensions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; IServiceCollection &lt;span class=&#34;hljs-title&#34;&gt;ConfigureOpenApi&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;this&lt;/span&gt; IServiceCollection services&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSwaggerGen();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSwaggerGenNewtonsoftSupport();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSingleton&amp;lt;IConfigureOptions&amp;lt;SwaggerGenOptions&amp;gt;, ConfigureSwaggerGenOptions&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSingleton&amp;lt;IConfigureOptions&amp;lt;SwaggerOptions&amp;gt;, ConfigureSwaggerOptions&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSingleton&amp;lt;IConfigureOptions&amp;lt;SwaggerUIOptions&amp;gt;, ConfigureSwaggerUiOptions&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; services;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ConfigureSwaggerGenOptions&lt;/span&gt; : &lt;span class=&#34;hljs-title&#34;&gt;IConfigureOptions&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;SwaggerGenOptions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Configure&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;SwaggerGenOptions options&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.SwaggerDoc(&lt;span class=&#34;hljs-string&#34;&gt;&#34;v1&#34;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; OpenApiInfo { Title = &lt;span class=&#34;hljs-string&#34;&gt;&#34;Demo&#34;&lt;/span&gt;, Version = &lt;span class=&#34;hljs-string&#34;&gt;&#34;v1&#34;&lt;/span&gt; });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ConfigureSwaggerOptions&lt;/span&gt; : &lt;span class=&#34;hljs-title&#34;&gt;IConfigureOptions&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;SwaggerOptions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Configure&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;SwaggerOptions options&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.RouteTemplate = &lt;span class=&#34;hljs-string&#34;&gt;&#34;swagger/{documentName}/swagger.json&#34;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.PreSerializeFilters.Add((swaggerDoc, httpReq) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            swaggerDoc.Servers = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt;[] {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; OpenApiServer {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    Url = &lt;span class=&#34;hljs-string&#34;&gt;$&#34;&lt;span class=&#34;hljs-subst&#34;&gt;{httpReq.Scheme}&lt;/span&gt;://&lt;span class=&#34;hljs-subst&#34;&gt;{httpReq.Host.Value}&lt;/span&gt;&lt;span class=&#34;hljs-subst&#34;&gt;{httpReq.PathBase}&lt;/span&gt;&#34;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    Description = &lt;span class=&#34;hljs-string&#34;&gt;&#34;Default&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            };&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        });&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ConfigureSwaggerUiOptions&lt;/span&gt; : &lt;span class=&#34;hljs-title&#34;&gt;IConfigureOptions&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;SwaggerUIOptions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Configure&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;SwaggerUIOptions options&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.SwaggerEndpoint(&lt;span class=&#34;hljs-string&#34;&gt;&#34;/swagger/v1/swagger.json&#34;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&#34;Demo v1&#34;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Application-Insights&#34;&gt;&lt;a href=&#34;#Application-Insights&#34; class=&#34;headerlink&#34; title=&#34;Application Insights&#34;&gt;&lt;/a&gt;Application Insights&lt;/h2&gt;&lt;p&gt;How about some Azure extensions? Most of the time you will not even need them, as ASP.NET Core seamlessly integrates with most of Azure resources. However, one particular extension I recommend using are &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.ApplicationInsights.AspNetCore&#34;&gt;Application Insights&lt;/a&gt;. You want to have application telemetry under control, and this package allows you to fine tune metrics and data that will be ingested by Azure. From setup point of view, there is nothing surprising:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;TelemetryExtensions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; IServiceCollection &lt;span class=&#34;hljs-title&#34;&gt;ConfigureTelemetry&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;this&lt;/span&gt; IServiceCollection services&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddApplicationInsightsTelemetry();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services.AddSingleton&amp;lt;IConfigureOptions&amp;lt;ApplicationInsightsServiceOptions&amp;gt;, ConfigureApplicationInsights&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; services;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ConfigureApplicationInsights&lt;/span&gt; : &lt;span class=&#34;hljs-title&#34;&gt;IConfigureOptions&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;ApplicationInsightsServiceOptions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Configure&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;ApplicationInsightsServiceOptions options&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.EnableHeartbeat = &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.EnableAppServicesHeartbeatTelemetryModule = &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Extras&#34;&gt;&lt;a href=&#34;#Extras&#34; class=&#34;headerlink&#34; title=&#34;Extras&#34;&gt;&lt;/a&gt;Extras&lt;/h2&gt;&lt;p&gt;You’ve probably gotten the gist of it by now; use extension methods to extract service definitions, and options to do actual service configuration. For completeness, let me give you the rest of commonly used ASP.NET Core features, including types used for configuration.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Default files middleware via &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.defaultfilesextensions.usedefaultfiles&#34;&gt;UseDefaultFiles()&lt;/a&gt; - &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.defaultfilesoptions&#34;&gt;DefaultFilesOptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Static files middleware via &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.staticfileextensions.usestaticfiles&#34;&gt;UseStaticFiles()&lt;/a&gt; - &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.staticfileoptions&#34;&gt;StaticFileOptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cross-Origin Resource Sharing via &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.corsservicecollectionextensions.addcors&#34;&gt;AddCors()&lt;/a&gt; - &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.cors.infrastructure.corsoptions?view=aspnetcore-6.0&#34;&gt;CorsOptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;API Versioning services via &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.AspNetCore.Mvc.Versioning&#34;&gt;AddApiVersioning() and AddVersionedApiExplorer()&lt;/a&gt; - &lt;a href=&#34;https://github.com/dotnet/aspnet-api-versioning/blob/master/src/Microsoft.AspNetCore.Mvc.Versioning.ApiExplorer/ApiExplorerOptions.cs&#34;&gt;ApiExplorerOptions&lt;/a&gt; and &lt;a href=&#34;https://github.com/dotnet/aspnet-api-versioning/blob/master/src/Common/Versioning/ApiVersioningOptions.cs&#34;&gt;ApiVersioningOptions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Application-code&#34;&gt;&lt;a href=&#34;#Application-code&#34; class=&#34;headerlink&#34; title=&#34;Application code&#34;&gt;&lt;/a&gt;Application code&lt;/h2&gt;&lt;p&gt;Last but not least, what about your own application code? I highly recommend following the same principles, in order to avoid having application setup in a single place. If you are using clean architecture, and have your code decoupled into layers, initialization could be as simple as:&lt;/p&gt;
&lt;figure class=&#34;highlight csharp hljs&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ApplicationExtensions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; IServiceCollection &lt;span class=&#34;hljs-title&#34;&gt;ConfigureApplication&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;this&lt;/span&gt; IServiceCollection services&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        services&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .AddDomain()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .AddApplicationServices()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .AddRepositories()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .AddIntegration();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; services;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;I have shown you one neat little trick that I use all the time, when setting up any kind of application. It is important to remember Single-responsibility principle, even for this type of code. Having &lt;em&gt;Startup.cs&lt;/em&gt; consisting of several hundreds, or even thousands lines, is nothing unheard of. And, sadly, is an obvious code smell.&lt;/p&gt;
&lt;p&gt;All code shown in this post was published to &lt;a href=&#34;https://github.com/uveta/demo-unclutter-startup&#34;&gt;GitHub&lt;/a&gt;, as a single ASP.NET Core 6 project.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.uveta.io/categories/blog/asynchronous-job-pattern-the-asp-net-core-mvc-way/</guid>
            <title>Asynchronous Job Pattern - The ASP.NET Core MVC Way</title>
            <link>https://www.uveta.io/categories/blog/asynchronous-job-pattern-the-asp-net-core-mvc-way/</link>
            <category>advanced</category>
            <category>microservices</category>
            <category>dotnet</category>
            <pubDate>Mon, 21 Dec 2020 20:33:44 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&#34;/categories/blog/asynchronous-job-pattern-the-asp-net-core-mvc-way/calendar.jpg&#34; class=&#34;&#34; title=&#34;Advent calendar&#34;&gt;

&lt;p&gt;Let me present a pattern we used to solve a problem haunting our enterprise application for ages. It was initially designed to handle long running operations, using &lt;a href=&#34;http://restalk-patterns.org/long-running-operation-polling.html&#34;&gt;RESTful approach&lt;/a&gt;, but we soon realized it could be used in many other ways. As it generalizes the system of submitting requests and obtaining responses, it can easily be adapted to different business processes, while keeping unified client interface.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;&lt;em&gt;This post is part of &lt;a href=&#34;https://www.csadvent.christmas/&#34;&gt;C# Advent Calendar 2020&lt;/a&gt;. Cheers to &lt;a href=&#34;https://twitter.com/mgroves&#34;&gt;Matthew D. Groves&lt;/a&gt; for letting me participate!&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;Building-blocks&#34;&gt;&lt;a href=&#34;#Building-blocks&#34; class=&#34;headerlink&#34; title=&#34;Building blocks&#34;&gt;&lt;/a&gt;Building blocks&lt;/h2&gt;&lt;p&gt;From a &lt;em&gt;client&lt;/em&gt; perspective, the pattern usage is pretty simple: it submits a &lt;em&gt;job&lt;/em&gt; for processing to an &lt;em&gt;endpoint&lt;/em&gt;; &lt;em&gt;job&lt;/em&gt; status is polled until processing is finished; if status was successful, client uses &lt;em&gt;endpoint&lt;/em&gt; to obtain output.&lt;/p&gt;
&lt;p&gt;On server side, several components are required to achieve such functionality. Lets take a look at the big picture and define individual pattern pieces.&lt;/p&gt;
&lt;h3 id=&#34;Job&#34;&gt;&lt;a href=&#34;#Job&#34; class=&#34;headerlink&#34; title=&#34;Job&#34;&gt;&lt;/a&gt;Job&lt;/h3&gt;&lt;p&gt;A &lt;em&gt;job&lt;/em&gt; is a principal entity, representing &lt;em&gt;client&lt;/em&gt; intent processed by a designated &lt;em&gt;worker&lt;/em&gt;. It is composed of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Header&lt;/strong&gt;, containing job metadata such as unique identifier, current status, time of creation/start/finish, potential issues as well as estimated time of completion&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Input parameters&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output values&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Worker&#34;&gt;&lt;a href=&#34;#Worker&#34; class=&#34;headerlink&#34; title=&#34;Worker&#34;&gt;&lt;/a&gt;Worker&lt;/h3&gt;&lt;p&gt;Component that does heavy lifting. Main responsibility is actual processing, as each &lt;em&gt;worker&lt;/em&gt; is able to handle specific &lt;em&gt;job&lt;/em&gt; type. In simple terms, we can describe it as a function accepting input parameters and returning either &lt;em&gt;job&lt;/em&gt; output or an error.&lt;/p&gt;
&lt;h3 id=&#34;Endpoint&#34;&gt;&lt;a href=&#34;#Endpoint&#34; class=&#34;headerlink&#34; title=&#34;Endpoint&#34;&gt;&lt;/a&gt;Endpoint&lt;/h3&gt;&lt;p&gt;Serves as an entry-point for &lt;em&gt;clients&lt;/em&gt;. After creating a job, &lt;em&gt;client&lt;/em&gt; should be able to obtain &lt;em&gt;job&lt;/em&gt; status at any point in time, as well as output after processing is finished. &lt;em&gt;Endpoint&lt;/em&gt; should also allow &lt;em&gt;client&lt;/em&gt; to cancel and clean-up a &lt;em&gt;job&lt;/em&gt;. Hence, it needs to provide following services:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create &lt;em&gt;job&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Get &lt;em&gt;job&lt;/em&gt; status&lt;/li&gt;
&lt;li&gt;Get &lt;em&gt;job&lt;/em&gt; output&lt;/li&gt;
&lt;li&gt;Delete &lt;em&gt;job&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Job-Repository-and-Queue&#34;&gt;&lt;a href=&#34;#Job-Repository-and-Queue&#34; class=&#34;headerlink&#34; title=&#34;Job Repository and Queue&#34;&gt;&lt;/a&gt;Job Repository and Queue&lt;/h3&gt;&lt;p&gt;A &lt;em&gt;repository&lt;/em&gt; will be used to store all &lt;em&gt;jobs&lt;/em&gt;, which would allow both &lt;em&gt;endpoint&lt;/em&gt; and &lt;em&gt;worker&lt;/em&gt; to read and update &lt;em&gt;job&lt;/em&gt; state. For now, let’s consider &lt;em&gt;repository&lt;/em&gt; an abstraction, as concrete implementation and storage technology may vary, depending on usage scenario.&lt;/p&gt;
&lt;p&gt;Binding between an &lt;em&gt;endpoint&lt;/em&gt; and a &lt;em&gt;worker&lt;/em&gt; would be achieved using a &lt;em&gt;job queue&lt;/em&gt; concept. It has to provide a &lt;em&gt;producer&lt;/em&gt; and a &lt;em&gt;consumer&lt;/em&gt;, depending on the component using &lt;em&gt;queue&lt;/em&gt; services. Similar to how &lt;em&gt;repository&lt;/em&gt; was defined, implementation may range from memory one to a hyper-scale message broker. &lt;/p&gt;
&lt;p&gt;Final pattern architecture is depicted in the diagram bellow. As all core components are defined, we should move on to implementation using APS.NET Core.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;architecture.png&#34; alt=&#34;Job pattern architecture&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ASP-NET-Core-implementation&#34;&gt;&lt;a href=&#34;#ASP-NET-Core-implementation&#34; class=&#34;headerlink&#34; title=&#34;ASP.NET Core implementation&#34;&gt;&lt;/a&gt;ASP.NET Core implementation&lt;/h2&gt;&lt;h3 id=&#34;Implementation-considerations&#34;&gt;&lt;a href=&#34;#Implementation-considerations&#34; class=&#34;headerlink&#34; title=&#34;Implementation considerations&#34;&gt;&lt;/a&gt;Implementation considerations&lt;/h3&gt;&lt;p&gt;In order to make the implementation as universal as possible, we need to limit &lt;em&gt;job&lt;/em&gt; inputs and outputs to one of each. If multiple values are expected, they could be provided via a custom model. &lt;code&gt;JobExecutionResult&lt;/code&gt; will serve as a wrapper for output value, containing result of &lt;em&gt;worker&lt;/em&gt; execution and any possible issues. If we define them as types &lt;code&gt;TInput&lt;/code&gt; and &lt;code&gt;TOutput&lt;/code&gt;, our &lt;em&gt;worker&lt;/em&gt; and &lt;em&gt;endpoint&lt;/em&gt; could look something like this:&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/uveta/85943b7354871239058c4b45ffca8ee9.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://gist.github.com/uveta/9ebe4d6514c8bf6d22dca908eeeb0c04.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;As &lt;em&gt;endpoint&lt;/em&gt; is user independent concept, it will be up to pattern to provide the implementation. On the other hand, &lt;em&gt;worker&lt;/em&gt; is responsible for executing custom actions, hence it’s implementation has to be provided by the pattern user. This reasoning will come into play during design, as we would like to provide plugin architecture for individual pattern components. This will allow utilizing only building blocks required for given scenario, while the user would provide implementation of required and customizable parts.&lt;/p&gt;
&lt;h3 id=&#34;Plugging-in-worker-implementation&#34;&gt;&lt;a href=&#34;#Plugging-in-worker-implementation&#34; class=&#34;headerlink&#34; title=&#34;Plugging in worker implementation&#34;&gt;&lt;/a&gt;Plugging in worker implementation&lt;/h3&gt;&lt;p&gt;&lt;em&gt;Worker&lt;/em&gt; flow is straightforward: it should use &lt;em&gt;queue consumer&lt;/em&gt; to listen for incoming &lt;em&gt;jobs&lt;/em&gt;; whenever one is received, it should process it and update &lt;em&gt;job&lt;/em&gt; status and output via &lt;em&gt;repository&lt;/em&gt;; then it waits for next one and repeats previous steps. This cycle is supposed to run for the whole application lifetime, as new &lt;em&gt;jobs&lt;/em&gt; can arrive at any time. A natural solution to implement such functionality are &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services&#34;&gt;hosted services&lt;/a&gt;. In our case, we could extract all common code (starting &lt;em&gt;queue consumer&lt;/em&gt;, input/output serialization and &lt;em&gt;job&lt;/em&gt; update) to a &lt;code&gt;WorkerInvoker&amp;lt;TWorker&amp;gt;&lt;/code&gt; hosted service, bound to specific &lt;em&gt;worker&lt;/em&gt; by it generic type &lt;code&gt;TWorker&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Adding &lt;code&gt;TWorker&lt;/code&gt; type to DI container has multiple benefits. On one side, it can be injected into &lt;code&gt;WorkerInvoker&amp;lt;TWorker&amp;gt;&lt;/code&gt;, removing the need to create it manually. On the other hand, it allows developers of &lt;code&gt;TWorker&lt;/code&gt; to freely inject business services into it.&lt;/p&gt;
&lt;h3 id=&#34;Exposing-endpoints&#34;&gt;&lt;a href=&#34;#Exposing-endpoints&#34; class=&#34;headerlink&#34; title=&#34;Exposing endpoints&#34;&gt;&lt;/a&gt;Exposing endpoints&lt;/h3&gt;&lt;p&gt;Since controllers are used as primary entry point into MVC applications, they are an obvious choice for coupling with &lt;em&gt;endpoints&lt;/em&gt;. In this case, &lt;a href=&#34;http://restalk-patterns.org/long-running-operation-polling.html&#34;&gt;initial description&lt;/a&gt; should be followed to the letter, as we are in domain of HTTP REST operations. Hence, controllers should include following routes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;POST &lt;em&gt;/jobs&lt;/em&gt;&lt;/strong&gt;: allows creating new jobs; responds with status &lt;em&gt;202 (Accepted)&lt;/em&gt;, containing &lt;em&gt;job&lt;/em&gt; resource &lt;em&gt;URL&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GET &lt;em&gt;/jobs/{jobId}&lt;/em&gt;&lt;/strong&gt;: resource &lt;em&gt;URL&lt;/em&gt; can be used for polling &lt;em&gt;job&lt;/em&gt; status, while in progress; when processing is finished, use &lt;em&gt;303 (See Other)&lt;/em&gt; redirect to provide client with an output resource &lt;em&gt;URL&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GET &lt;em&gt;/jobs/{jobId}/output&lt;/em&gt;&lt;/strong&gt;: output resource &lt;em&gt;URL&lt;/em&gt;; should return &lt;em&gt;200 (OK)&lt;/em&gt; result containing output value, after &lt;em&gt;job&lt;/em&gt; processing finishes; returns &lt;em&gt;404 (NotFound)&lt;/em&gt; error otherwise&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DELETE &lt;em&gt;/jobs/{jobId}&lt;/em&gt;&lt;/strong&gt;: disposes of any reserved resources; client should call it after polling finishes and output is obtained; if not done by client, server should clean up old &lt;em&gt;jobs&lt;/em&gt; automatically&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The burden of creating a controller should not fall on the user; it is the responsibility of the pattern itself, since each route functionality is known in advance. For this purpose we could implement a generic &lt;code&gt;JobsController&amp;lt;TEndpoint&amp;gt;&lt;/code&gt;, which would be bound to specific &lt;em&gt;endpoint&lt;/em&gt; via its type parameter &lt;code&gt;TEndpoint&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As multiple &lt;em&gt;endpoints&lt;/em&gt; per service have to be supported, MVC requires providing different underlying type for each controller. This is not possible with our idea of using a generic one, as changing generic’s type parameter does not change overall generic type. Instead, we should create individual controller type from base generic dynamically, using a bit of &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.typebuilder&#34;&gt;TypeBuilder&lt;/a&gt; reflection magic. Generated types could then be added to MVC using custom &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.applicationparts.iapplicationparttypeprovider&#34;&gt;IApplicationPartTypeProvider&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;Few-words-on-repository-and-queue&#34;&gt;&lt;a href=&#34;#Few-words-on-repository-and-queue&#34; class=&#34;headerlink&#34; title=&#34;Few words on repository and queue&#34;&gt;&lt;/a&gt;Few words on repository and queue&lt;/h3&gt;&lt;p&gt;Following how we defined &lt;em&gt;job repository&lt;/em&gt; and &lt;em&gt;queue&lt;/em&gt;, respecting interfaces would be:&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/uveta/44ca3dfbba05536e5091fbc353b611ec.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://gist.github.com/uveta/585866e8ae67e75d7c65eac9cccb6d0b.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The pattern has to supply default memory implementation for both of them. Although this should suffice for test and single-service usage, it completely falls flat in any advanced scenarios. Hence, replacing default implementations must be allowed via extensions.&lt;/p&gt;
&lt;h3 id=&#34;Configuring-job-services&#34;&gt;&lt;a href=&#34;#Configuring-job-services&#34; class=&#34;headerlink&#34; title=&#34;Configuring job services&#34;&gt;&lt;/a&gt;Configuring job services&lt;/h3&gt;&lt;p&gt;We should follow principals ASP.NET Core was build upon and adopt a plugin architecture in order to configure our pattern services. I used &lt;a href=&#34;https://github.com/uveta/extensions-jobs/tree/main/samples/MvcDemo&#34;&gt;a sample project&lt;/a&gt; to demonstrate how such behavior could be achieved. The following example includes definition of one &lt;em&gt;endpoint&lt;/em&gt; and its bound &lt;em&gt;worker&lt;/em&gt;.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/uveta/777c12716df3015ebc67a651916bea23.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;In this case, &lt;code&gt;PingRequest&lt;/code&gt; and &lt;code&gt;PingResponse&lt;/code&gt; correspond to input and output types. &lt;code&gt;PingWorker&lt;/code&gt; represents a custom implementation of &lt;code&gt;IWorker&lt;/code&gt;, supplied by user. Other components (&lt;em&gt;endpoint&lt;/em&gt;, &lt;em&gt;repository&lt;/em&gt; and &lt;em&gt;queue&lt;/em&gt;) are provided by pattern and only configured here.&lt;/p&gt;
&lt;h2 id=&#34;Usage-alternatives&#34;&gt;&lt;a href=&#34;#Usage-alternatives&#34; class=&#34;headerlink&#34; title=&#34;Usage alternatives&#34;&gt;&lt;/a&gt;Usage alternatives&lt;/h2&gt;&lt;p&gt;Proposed implementation is just one of many possible, as well as its usage. All building blocks are introduced as abstract concepts, which can be adapted for different scenarios than initially intended. For example, an &lt;em&gt;endpoint&lt;/em&gt; could be utilized to issue an RPC call without knowing the address of remote service; client would use &lt;em&gt;endpoint&lt;/em&gt; to create a new job, which would reach designated &lt;em&gt;worker&lt;/em&gt; via queue, effectively removing the need of individual services knowing other ones even exist. Only constraint is imposed by specific business feature, having strictly defined input and output.&lt;/p&gt;
&lt;p&gt;Further improvements can be introduced on &lt;em&gt;workers&lt;/em&gt; as well. In order to use them in a real-world scenarios, there has to be a possibility of configuring their maximum scaling and execution period limits. This feature will have to be supported by &lt;em&gt;queue&lt;/em&gt; implementation, as &lt;em&gt;worker&lt;/em&gt; is invoked based on actions triggered by &lt;em&gt;queue consumer&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Finally, default memory implementations of &lt;em&gt;queue&lt;/em&gt; and &lt;em&gt;repository&lt;/em&gt; are only good for &lt;a href=&#34;https://github.com/uveta/extensions-jobs/tree/main/samples/MvcDemo&#34;&gt;demonstration purposes&lt;/a&gt;. &lt;em&gt;Repository&lt;/em&gt; should offer some form of permanent external storage, especially if usage in multi-service applications is considered. Same goes for &lt;em&gt;queue&lt;/em&gt;, as the need for underlying message broker is evident in even simple production scenarios.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In this article I explained which set of problems did we solve using long running job pattern. We also saw one of the ways to implement it, using ASP.NET Core MVC. As a final observation, I described how inner pattern components can be used outside of MVC, in any system that wants to generalize request/response flow and reduce service coupling.&lt;/p&gt;
&lt;p&gt;Source code and samples can be found on &lt;a href=&#34;https://github.com/uveta/extensions-jobs&#34;&gt;Github&lt;/a&gt;. Individual packages have also been published to &lt;a href=&#34;https://www.nuget.org/packages/Uveta.Extensions.Jobs/&#34;&gt;nuget.org&lt;/a&gt;, in case you would like to try them in your own application.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
    </channel>
</rss>
